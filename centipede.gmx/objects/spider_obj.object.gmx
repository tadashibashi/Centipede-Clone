<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spider_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>enemy_parent</parentName>
  <maskName>spider_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//LOCAL VARIABLE INITIATION
spider_anim = 0 //variable for spider subimage animation
spider_score = 0 //when the spider dies, this score is given to player
sprite_index = spider_spr //the spider sprite is set!
image_speed = 0
explodex = -4; explodey = 0
if x &lt; 10 then {hdir = 2; direction = 315}; if x &gt; 200 then {hdir = 1; direction = 225 } //sets direction
vdir = 2
if sound_isplaying(spider_snd) then {sound_stop(spider_snd)}
if global.game_mode = 1 then {sound_loop(spider_snd);}
spd = 2+global.level*.5
speed = spd
change = 0

if speed &gt;= 6 then speed = 6
alarm[0] = 10
regular_move = 0
instance_create(x-4,y,mushroom_eater_obj)


//I hate spiders... both in video games and real life, but its rewarding when you kill them...
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_stop(spider_snd)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>change = 1;
regular_move = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SPIDER ANIMATION
//animate the sprite
if global.all_stop = false then
{spider_anim += .5; if !sound_isplaying(spider_snd)&amp;&amp;!global.demo = true then sound_play(spider_snd); if direction = 90 or direction = 270 then speed = spd*.75 else speed = spd}
if global.all_stop = true then {speed = 0; sound_stop(spider_snd) exit;}
if global.spiders_killed &gt;10 then spd = 5.5
 else spd = (global.level*.5 + 2)
if spd &gt; 6 then spd = 6

if spider_anim &gt;= 8 then spider_anim = 0 //reset animation when completed

//execute animation
image_index = spider_anim + (global.level-1)*8 //set animation to the right level color

///Potential Scoreable Points
if instance_exists(ship_obj) then ship_distance = (ship_obj.y - y)/8
else ship_distance = 0
if ship_distance &gt; 0 and ship_distance &lt;= 3.5 then spider_score = 900
if ship_distance &gt; 3.5 and ship_distance &lt;= 7 then spider_score = 600
if ship_distance &gt; 7 then spider_score = 300

if sound_isplaying(extra_life_snd) then sound_volume(spider_snd,0)
else sound_volume(spider_snd,100)



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if change = true then change_dir = ceil(round(random(10))) else change_dir = 0;
if direction = 270 or direction = 315 or direction = 225  then vdir = 2;
if direction = 90 or direction = 135 or direction = 45 then vdir = 1;
//obsolete function: sound_pan(spider_snd,100/room_width*x)

if regular_move = 1
{
switch_dir = ceil(round(random(3)));

if y &lt;= 152
 {
 y = 152
 change = 0;
 change_dir = 0
 alarm[0] = 10;
 if hdir = 1 //Going Left
   {
    if direction = 90
      {
       if switch_dir = 1 then direction = 270;
       if switch_dir = 2 or switch_dir = 3 then direction = 225;
      }
    if direction = 135
     {
      if switch_dir = 1 or switch_dir = 2 then direction = 225;
      if switch_dir = 3 then direction = 270;
     }
   }
 if hdir = 2 //Going Right
   {
   change = 0;
   change_dir = 0;
   alarm[0] = 10;
    if direction = 90
     {
      if switch_dir = 1 then direction = 270;
      if switch_dir = 2 or switch_dir = 3 then direction = 315;
     }
    if direction = 45
     {
      if switch_dir = 1 then direction = 270;
      if switch_dir = 2 or switch_dir = 3 then direction = 315;
     }
   }
 }

if y &gt;= 240 then
{
y = 240
change = 0;
change_dir = 0;
alarm[0] = 10;
  if hdir = 1 //Going Left
   {
    if direction = 270
     {
     if switch_dir = 1 then direction = 90;
     if switch_dir = 2 or switch_dir = 3 then direction = 135;
     }
    if direction = 225
     {
     if switch_dir = 1 then direction = 90;
     if switch_dir = 2 or switch_dir = 3 then direction = 135;
     }
    }
  if hdir = 2 //Going Right
  {
   if direction = 270
    {
     if switch_dir = 1 then direction = 90;
     if switch_dir = 2 or switch_dir = 3 then direction = 45;
    }
   if direction = 315
   {
    if switch_dir = 1 or switch_dir = 2 then direction = 45;
    if switch_dir = 3 then direction = 90;
   }
  }
}

if change_dir = 1
 {
 change = 0;
 change_dir = 0
 alarm[0] = 10;
  if hdir = 1 //Going Left
   {
    if vdir = 1 //Going Up
     {
      if switch_dir = 1 then direction = 225;
      if switch_dir = 2 then direction = 270;
      if switch_dir = 3 then direction = 135;
     }
    if vdir = 2 //Going Down
     {
      if switch_dir = 1 then direction = 135;
      if switch_dir = 2 then direction = 90;
      if switch_dir = 3 then direction = 225;
     }
   }

  if hdir = 2 //Going Right
   {
    if vdir = 1 //Going Up
     {
      if switch_dir = 1 then direction = 315;
      if switch_dir = 2 then direction = 270;
      if switch_dir = 3 then direction = 45;
     }
    if vdir = 2 //Going Down
     {
      if switch_dir = 1 then direction = 45;
      if switch_dir = 2 then direction = 90;
      if switch_dir = 3 then direction = 315;
     }
   }
 }

 }


 //Destroy Spider if it exits the screen
 if hdir = 1 and x &lt; -8 then instance_destroy();
 if hdir = 2 and x &gt; room_width + 8 then instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="laser_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Spider Death


instance_create(x-4,y,explode_obj) //explode animation appears
if global.demo = false then {score += spider_score;} //add points to the player score
global.spider_points += spider_score
global_game_obj.alarm[5] = 7
global_game_obj.points_amount = (spider_score/300)-1
global_game_obj.points_x = x - 4
global_game_obj.points_y = y +2
global.spiders_killed += 1
global.spider_points += spider_score
instance_destroy(); //destroy self
with (other) instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ship_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Spider Death
if other.invincible = true
{
instance_create(x-4,y,explode_obj)
instance_create(x-12 + random(16),y-8+random(16),explode_obj)
instance_create(x-12 + random(16),y-8+random(16),explode_obj)
instance_create(x-12 + random(16),y-8+random(16),explode_obj)
instance_create(x-12 + random(16),y-8+random(16),explode_obj)
instance_create(x-12 + random(16),y-8+random(16),explode_obj)
instance_create(x-12 + random(16),y-8+random(16),explode_obj)
instance_create(x-12 + random(16),y-8+random(16),explode_obj)


 //explode animation appears
if global.demo = false then {score += spider_score;} //add score accordingly
global.spider_points += spider_score
global_game_obj.alarm[5] = 7
global_game_obj.points_amount = (spider_score/300)-1
global_game_obj.points_x = x - 4
global_game_obj.points_y = y +2
global.spiders_killed += 1

instance_destroy(); //destroy self
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
