<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>body_forward_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>enemy_parent</parentName>
  <maskName>centipede_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Head is true if the first one spawned
if (instance_number(centipede_obj) = 1) {
     head = true;
} else {
     head = false;
}

image_speed = 0

dont_check_head = true

//Variables used for Avoiding Collisions with other Centipede
can_move = true //trigger used for collisions with other centipede
age = 0 //age of centipede
go_down = false
collision_time = 0

//Grasshopper Game Var
counter = 0
injure = 0

//Offset Animation
if (global_game_obj.cent_spawn_created &gt; 8) {
     anim = global_game_obj.cent_spawn_created - 8;
} else {
     anim = global_game_obj.cent_spawn_created;
}

//Set animation variables
sprite_old = sprite_index; image_speed = 0; cent_anim = 0; cent_anim2 = 0;
//Set Image Index
image_index = cent_anim + ((global.level-1)*8);
//Location where explosion should happen
explodex = -2; explodey = 0;

//Direction and Motion Orientation Initiation
//When Spawned from RIGHT during Regeneration
if (y = 192) &amp;&amp; (x &gt;= room_width) {
     hdir = 1; image_xscale = 1; move_mode = 1; vdir = 1;
     if (global_game_obj.even_or_odd_level = 1) then {spd = 4};
     if (global_game_obj.even_or_odd_level = 2) then {spd = 2};
} else { //When Spawned from LEFT during Regeneration
     if (y = 192) &amp;&amp; (x &lt; 0) {
          hdir = 2; image_xscale = -1; move_mode = 1; vdir = 1;
          if (global_game_obj.even_or_odd_level = 1) then {spd = 4};
          if (global_game_obj.even_or_odd_level = 2) then {spd = 2};
     } else { //When Spawned from ceiling on middle or left
          if (x &lt; 120 &amp;&amp; y &lt; 16) or (x &gt; 120 &amp;&amp; y &lt; 16) {
               c = round(ceil(random(2)));
               if c = 1 {
                    hdir = 2; vdir = 1; move_mode = 2; image_xscale = -1;
                    switch_type = 3; path_set = 1; spd = 4;
               }
               if c = 2 {
                    hdir = 1; vdir = 1; move_mode = 2; image_xscale = 1;
                    switch_type = 4; path_set = 1; spd = 4;
               }
          } else {
               if (x = 120) &amp;&amp; (y &lt; 16) {
                    hdir = 2; vdir = 1; move_mode = 2; image_xscale = -1;
                    switch_type = 3; path_set = 1;
                    if (global_game_obj.even_or_odd_level = 1) then {spd = 4};
                    if (global_game_obj.even_or_odd_level = 2) then {spd = 2};
               } else {
                    move_mode = 1; hdir = 1; vdir = 1; image_xscale = -1;
                    if (global_game_obj.even_or_odd_level = 1) then {spd = 4};
                    if (global_game_obj.even_or_odd_level = 2) then {spd = 2};
               }
          }
     }
}



move_snap(8,8); super_mushroom = false; switch_step = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_move = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Freezes and resets animations
if global.all_stop = true {
     cent_anim = 0; cent_anim2 = 0;
     if (cent_anim &gt;= 7) {
        cent_anim = 0;
     }
     if (cent_anim2 &gt;= 3) {
        cent_anim2 = 0;
     }
     if (sprite_index == cent_forward_spr) or (sprite_index == body_forward_spr) {
        image_index = cent_anim + ((global.level-1)*8);
     }
     if (sprite_index == cent_angle_spr) or (sprite_index == body_angle_spr)
     or (sprite_index == cent_angle_up_spr) or (sprite_index == body_angle_up_spr)
     or (sprite_index == cent_down_spr) or (sprite_index == cent_up_spr)
     or (sprite_index == body_down_spr) or (sprite_index == body_up_spr) {
        image_index = cent_anim2 + ((global.level-1)*4);
     }
}

if (global.all_stop = false) {
     //Reset Centipede Animations Before and After Step
    if (cent_anim &gt;= 7) {
        cent_anim = 0;
    }
    if (cent_anim2 &gt;= 3) {
        cent_anim2 = 0;
    }

    if (sprite_index == cent_forward_spr) or (sprite_index == body_forward_spr) {
        image_index = cent_anim + ((global.level-1)*8);
    }
    if (sprite_index == cent_angle_spr) or (sprite_index == body_angle_spr)
    or (sprite_index == cent_angle_up_spr) or (sprite_index == body_angle_up_spr)
    or (sprite_index == cent_down_spr) or (sprite_index == cent_up_spr)
    or (sprite_index == body_down_spr) or (sprite_index == body_up_spr) {
        image_index = cent_anim2 + ((global.level-1)*4);
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.all_stop = true {
     cent_anim = 0; cent_anim2 = 0;
     if (cent_anim &gt;= 7) then {cent_anim = 0};
     if (cent_anim2 &gt;= 3) then {cent_anim2 = 0};
     if sprite_index = cent_forward_spr or sprite_index = body_forward_spr
 then {image_index = cent_anim + ((global.level-1)*8);}
if sprite_index = cent_angle_spr or sprite_index = body_angle_spr
or sprite_index = cent_angle_up_spr or sprite_index = body_angle_up_spr
or sprite_index = cent_down_spr or sprite_index = cent_up_spr
or sprite_index = body_down_spr or sprite_index = body_up_spr
 then {image_index = cent_anim2 + ((global.level-1)*4);}
}

if global.all_stop = false {
if cent_anim &gt;= 7 then cent_anim = 0; if cent_anim2 &gt;= 3 then cent_anim2 = 0;
if sprite_index = cent_forward_spr or sprite_index = body_forward_spr
 then {image_index = cent_anim + ((global.level-1)*8);}
if sprite_index = cent_angle_spr or sprite_index = body_angle_spr
or sprite_index = cent_angle_up_spr or sprite_index = body_angle_up_spr
or sprite_index = cent_down_spr or sprite_index = cent_up_spr
or sprite_index = body_down_spr or sprite_index = body_up_spr
 then {image_index = cent_anim2 + ((global.level-1)*4);}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Freezes and resets animations
if (global.all_stop == true) {
    speed = 0;
     cent_anim = 0; cent_anim2 = 0;
     if (cent_anim &gt;= 7) {
        cent_anim = 0;
     }
     if (cent_anim2 &gt;= 3) {
        cent_anim2 = 0;
     }
     if (sprite_index == cent_forward_spr) or (sprite_index == body_forward_spr) {
        image_index = cent_anim + ((global.level-1)*8);
     }
     if (sprite_index == cent_angle_spr) or (sprite_index == body_angle_spr)
     or (sprite_index == cent_angle_up_spr) or (sprite_index == body_angle_up_spr)
     or (sprite_index == cent_down_spr) or (sprite_index == cent_up_spr)
     or (sprite_index == body_down_spr) or (sprite_index == body_up_spr) {
        image_index = cent_anim2 + ((global.level-1)*4);
     }
}

if (global.all_stop = false) {
     //Reset Centipede Animations Before and After Step
    if (cent_anim &gt;= 7) {
        cent_anim = 0;
    }
    if (cent_anim2 &gt;= 3) {
        cent_anim2 = 0;
    }

    if (sprite_index == cent_forward_spr) or (sprite_index == body_forward_spr) {
        image_index = cent_anim + ((global.level-1)*8);
    }
    if (sprite_index == cent_angle_spr) or (sprite_index == body_angle_spr)
    or (sprite_index == cent_angle_up_spr) or (sprite_index == body_angle_up_spr)
    or (sprite_index == cent_down_spr) or (sprite_index == cent_up_spr)
    or (sprite_index == body_down_spr) or (sprite_index == body_up_spr) {
        image_index = cent_anim2 + ((global.level-1)*4);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Counters</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cycle the centipede animation variables
if (cent_anim &gt;= 7) then {cent_anim = 0};
if (cent_anim2 &gt;= 3) then {cent_anim2 = 0};

if (global.all_stop = true) {
     exit;
}

//Set sprite counter according to sprite_index
//Increase the corresponding sprite counter
if (sprite_index = cent_forward_spr) or (sprite_index = body_forward_spr) {
     cent_anim += .5; image_index = cent_anim + ((global.level-1)*8);
}

if (sprite_index = cent_angle_spr) or (sprite_index = body_angle_spr)
 or (sprite_index = cent_angle_up_spr) or (sprite_index = body_angle_up_spr)
 or (sprite_index = cent_down_spr) or (sprite_index = cent_up_spr)
 or (sprite_index = body_down_spr) or (sprite_index = body_up_spr) {
      cent_anim2 += .5; image_index = cent_anim2 + ((global.level-1)*4);
}

//age determines which centipedes are connected
//it senses if the age of another centipede is different by too much
//to be connected to the other

if (move_mode = 1) then {age  += 1};
if (move_mode = 2) then {age  += 2};
if (move_mode = 3) then {age  += 2};

//used in the grasshopper game
if injure = 1 then counter += 1
if counter = 30 then injure = 0

if !(collision_point(x,y,centipede_obj,true,false)) then {collision_time = 0};



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement Code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Preliminary If Statements///////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//Keep the Centipede within room boundaries
if (x &gt; room_width-4) then {x = room_width-4};
if (x &lt; 0) then {x = 0};
if (y &gt; 240) then {y = 240};

//Keep the Centipede aligned on Grid
if (move_mode = 1) {
      if  x/8 != round(x/8) {
            move_snap(2,1);
      }
}

//If Super Mushroom Is True then check below if this obj is the head
if super_mushroom = true {
     if (!collision_rectangle(x-4,y+4,x+4,y+9,centipede_obj,true,true)) {
          head = true;
     } else {
          head = false;
     }
}

//Cut Off This Event if global.all_stop is true
if (global.all_stop == true) or (global.game_mode == 3) {
   speed = 0; 
   cent_anim = 0; 
   cent_anim2 = 0;
   exit;
   
} else {

    //If Centipede reaches the bottom of the screen, remove super mushroom status
    if (y &gt;= 240) {
        super_mushroom = false;
    }
    
    //If Centipede is the only one left after emerging onto playing field
    //Increase its speed to 4
    if (instance_number(centipede_obj) = 1) &amp;&amp; (y &gt; 16){
        spd = 4;
    }
    
    
     ///////////////////////////////////////////////////////////////////////////////
    //////////MOVE MODE LEGEND//////////////////////////////////////////////////////
    //move_mode: 1 horizontal motion                                              //
    //           2 arced motion going downward                                    //
    //           3 arced motion going upward                                      //
    ////////////////////////////////////////////////////////////////////////////////
     ///////////////////////////////////////////////////////////////////////////////
    
    //&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;//
    ////////////////////////////////////////////////////////////////////////////////
    ////////MOVE MODE = 1: Horizontal Motion////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    //&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;//
    
    if (move_mode == 1) {
    
      ////////Preliminary If Statements///////////////
      //Do not check what part of the body it is (head or body) if about to collide
      //into the objects: side_wall_obj, mushroom_obj, and invis_mushroom_obj.
      if (collision_rectangle(x,y+4,x-9,y+4,side_wall_obj,true,true))
       or (collision_rectangle(x,y+4,x-9,y+4,mushroom_obj,true,true))
       or (collision_rectangle(x,y+4,x+9,y+4,side_wall_obj,true,true))
       or (collision_rectangle(x,y+4,x+9,y+4,mushroom_obj,true,true))
       or (collision_rectangle(x,y+4,x-9,y+4,invis_mushroom_obj,true,true))
       or (collision_rectangle(x,y+4,x+9,y+4,invis_mushroom_obj,true,true)) {
           dont_check_head = true;
      } else {
           dont_check_head = false;
      }//end Do Not Check Body
    
      //If the Centipede is the head, change the sprite index to the head sprite
      //if not, change it to the body sprite.
      if (head == true) {
          sprite_index = cent_forward_spr;
      } else {
          sprite_index = body_forward_spr;
      }
    
      //Snap the centipede to the grid of its speed
      move_snap(spd,8);
      //Speed is determined by spd
      speed = spd;
    
      //This sets the switch_step to the appropriate starting points
      //before even getting to move_mode 2 or 3. switch_step is the point/step
      //the centipede is at on the curved path when it hits a mushroom or wall
      if (vdir == 1) then switch_step = 0;
      if (vdir == 2) then switch_step = 14;
    
      //Changing Vertical Orientation
      if (y &gt;= 240) then {vdir = 2; global.centipede_regen = true};
      if (vdir = 2) &amp;&amp; (y &lt;= 200) then {vdir = 1};
    
    
    
    //&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;//
    //IF facing LEFT&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
    //move_mode = 1&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;//
    
      if (hdir = 1) {
    
        //Direction is Left &lt;
        direction = 180;
    
        //Check if Head or Body
        if (dont_check_head = false) {
           if collision_point(x-9,y+4,centipede_obj,true,true) {
                head = false;
           } else {
                head = true;
           }
        }//end Check if Head or Body
    
        //Change Movement Mode when centipede hits a mushroom or sidewall
        if x/8 = round(x/8) { //only activate when grid snapped
            if (global_game_obj.cells[abs(x div 8 - 2), y div 8] = 1)
            or (collision_point(x-9,y+4,side_wall_obj,true,true))
            or (go_down = true) {
                 go_down = false
                 move_snap(8,8) //snap to grid
                 switch_type = 1 //Heading Left
                 speed = 0 //set speed to 0
                 path_set = 1 //set new path
                 if (vdir = 1) then {move_mode = 2}; //if heading downwards
                 if (vdir = 2) then {move_mode = 3}; //if heading upwards
           } else {
                 switch_type = 0 //otherwise reset switch_type
           }
        }//end Change Movement
    
      }//end IF Facing Left
    
    
    
    //&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;//
    //IF facing RIGHT&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
    //move_mode = 1&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;//
    
     if (hdir = 2) {
    
      //Direction is Right &gt;
      direction = 0;
    
      //Check if Head or Body Part
      if (dont_check_head = false) {
           if collision_point(x+8,y+4,centipede_obj,true,true) {
                  head = false
           } else {
                  head = true
           }
      }//end Check if Head or Body
    
      //Change Movement when Centipede hits mushroom or side wall
      if (x/8 = round(x/8)) { //this grid snap ensures a consistent movement
            if (global_game_obj.cells[x div 8 + 1, y div 8] = 1)
            or (collision_point(x+9,y+4,side_wall_obj,true,true))
            or (go_down = true) {
                go_down = false;
                move_snap(8,8); //snap to grid
                switch_type = 2; //heading right, curving down left
                speed = 0; //set speed to 0
                path_set = 1 //set new path
                if (vdir = 1) then {move_mode = 2}; //if going down
                if (vdir = 2) then {move_mode = 3}; //if going up
           } else {
                switch_type = 0; //reset switch_type otherwise
        }
      }//end Change Movement
    
     }//end IF Facing RIGHT
    
    
    }//end MOVE MODE 1
    
    
    
    
    
    //((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((//
    //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
    ////////MOVE MODE = 2: Downward Arc Motion//////////////////////////////////////
    //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
    //))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))//
    
    
    if (move_mode = 2) {
    
         dont_check_head = true //do not check if head or body during this time
    
    
    
    //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
    //////SWITCH_TYPE 1 Starting going LEFT&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
    //move_mode = 2 VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
    
         if switch_type = 1 {
    
             //Set the Curved Downward Path that Centipede will take
             if path_set = 1 {
                  image_xscale = 1 //Facing Left Sprite
                  path_set = 0; //Turn off Trigger
                  step_x[0] = x; step_x[1] = x-1; step_x[2] = x-2; step_x[3] = x-3;
                  step_x[4] = x-4; step_x[5] = x-5; step_x[6] = x-6;
                  step_x[7] = x-7; step_x[8] = x-8; step_x[9] = x-8;
                  step_x[10] = x-8; step_x[11] = x-7; step_x[12] = x-6;
                  step_x[13] = x-5; step_x[14] = x-4; step_x[15] = x-4;
                  step_x[16] = x-4; step_x[17] = x-4; step_x[18] = x-4;
                  step_y[0] = y; step_y[1] = y; step_y[2] = y; step_y[3] = y;
                  step_y[4] = y; step_y[5] = y; step_y[6] = y+1; step_y[7] = y+2;
                  step_y[8] = y+3; step_y[9] = y+4; step_y[10] = y+5;
                  step_y[11] = y+6; step_y[12] = y+7; step_y[13] = y+8;
                  step_y[14] = y+8; step_y[15] = y+8; step_y[16] = y+8;
                  step_y[17] = y+8; step_y[18] = y+8;
                  switch_step = 0;
             }//end Set the Curved Downward Path
    
             //When Path is Completed
             if (switch_step &gt;= 13) {
                  //If step overshoots step 13, set switch_step to 13
                  switch_step = 13
    
                  //If there is another obstacle in next row
                  if (global_game_obj.cells[x div 8 + 1, y div 8] = 1)
                  or (collision_rectangle(x+7,y+2,x+4,y+6,side_wall_obj,true,true))
                  or (super_mushroom = true) {
                        switch_type = 4 //Continue curving downward going right
                        path_set = 1 //Set new path
                  } else { //If there is not another obstacle in next row
                        hdir = 2 //going right
                        image_xscale = -1 //image facing right
                        move_mode = 1 //movement back to horizontal mode
                        switch_step = 14 //finish path
                        switch_type = 0 //reset switch_type
                  }
              }//end When path is Completed
    
             if (switch_step + spd &lt; 13) then {switch_step += spd}; //increase step
             if (switch_step + spd &gt;= 13) then {switch_step = 13}; //cap max 13
             round(switch_step); //Round the number of the Step for to plug in array
             x = step_x[switch_step];//centipede x coordinate on path
             y = step_y[switch_step];//centipede y coordinate on path
    
             //Set Sprite Image Correctly//
    
             //Path Steps 0-4
             if (switch_step &gt;= 0) &amp;&amp; (switch_step &lt;= 4) {
                 image_xscale = 1; //Facing Left
                 //Set Sprite to Head if Head and Body if Body
                 if (head = true) {
                     sprite_index = cent_forward_spr
                 } else {
                     sprite_index = body_forward_spr;
                 }
             }
             //Steps 5-7
             if (switch_step &gt;= 5) &amp;&amp; (switch_step &lt;= 7) {
                 image_xscale = 1; //Facing Left
                 //Set Sprite to Head if Head and Body if Body
                 if (head = true) {
                      sprite_index = cent_angle_spr
                 } else {
                      sprite_index = body_angle_spr;
                 }
             }
             //Steps 8-10
             if (switch_step &gt;= 8) &amp;&amp; (switch_step &lt;= 10) {
                  image_xscale = 1; //Facing Left
                  //Set Sprite to Head if Head and Body if Body
                  if (head = true) {
                      sprite_index = cent_down_spr
                  } else {
                      sprite_index = body_down_spr;
                  }
             }
             //Steps 11-13
             if (switch_step &gt;= 11) &amp;&amp; (switch_step &lt;= 13) {
                  image_xscale = -1 //Facing Right
                  if (head = true) {
                       sprite_index = cent_angle_spr
                  } else {
                       sprite_index = body_angle_spr;
                  }
             }
             //Snap to Grid at the start and end of path
             if (switch_step = 0) then {move_snap(8,8)};
             if (switch_step = 14) then {move_snap(8,8)};
    
       }//end switch_type = 1
    
    
    
    //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
    //////SWITCH_TYPE 2 Starting going RIGHT&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
    //move_mode = 2 VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
    
       if (switch_type = 2) {
            //Sets the curved Path that Centipede will take
            if (path_set = 1) {
                 image_xscale = -1
                 path_set = 0;
                 step_x[0] = x; step_x[1] = x+1; step_x[2] = x+2; step_x[3] = x+3;
                 step_x[4] = x+4; step_x[5] = x+5; step_x[6] = x+6; step_x[7] = x+7;
                 step_x[8] = x+8; step_x[9] = x+8; step_x[10] = x+8;
                 step_x[11] = x+7; step_x[12] = x+6; step_x[13] = x+5;
                 step_x[14] = x+4; step_x[15] = x+4; step_x[16] = x+4;
                 step_x[17] = x+4; step_x[18] = x+4; step_y[0] = y; step_y[1] = y;
                 step_y[2] = y; step_y[3] = y; step_y[4] = y; step_y[5] = y;
                 step_y[6] = y+1; step_y[7] = y+2; step_y[8] = y+3; step_y[9] = y+4;
                 step_y[10] = y+5; step_y[11] = y+6; step_y[12] = y+7;
                 step_y[13] = y+8; step_y[14] = y+8; step_y[15] = y+8;
                 step_y[16] = y+8; step_y[17] = y+8; step_y[18] = y+8;
                 switch_step = 0;
            }
       //Change Movement when Centipede reaches end of Path
       if (switch_step &gt;= 13) {
            switch_step = 13
            if (global_game_obj.cells[abs(x div 8 - 1), y div 8] = 1)
            or (collision_point(x-7,y+4,side_wall_obj,true,true))
            or (super_mushroom = true) {
                 switch_type = 3
                 path_set = 1
            } else {
                 hdir = 1
                 image_xscale = 1
                 move_mode = 1
                 switch_step = 14
                 switch_type = 0
            }
       }//end Change Movement
    
       //Increase switch_step if under 13
       //otherwise set switch_step to 13
       if (switch_step + spd &lt; 13) {
            switch_step += spd;
       } else {
            if (switch_step + spd &gt;= 13) {
                 switch_step = 13;
            }
       }
       //Round switch_step in order to plug it into an array
       round(switch_step);
    
       x = step_x[switch_step]; //x and y values on path
       y = step_y[switch_step];
    
       //Set Sprite Image Correctly//
       //Steps 0-4
       if (switch_step &gt;= 0) &amp;&amp; (switch_step &lt;= 4) {
            image_xscale = -1
            if (head = true) {
                 sprite_index = cent_forward_spr;
            } else {
                 sprite_index = body_forward_spr;
            }
       }
       //Steps 5-7
       if (switch_step &gt;= 5) &amp;&amp; (switch_step &lt;= 7) {
            image_xscale = -1
            if (head = true) {
                 sprite_index = cent_angle_spr;
            } else {
                 sprite_index = body_angle_spr;
            }
       }
       //Steps 8-10
       if (switch_step &gt;= 8) &amp;&amp; (switch_step &lt;= 10) {
            image_xscale = 1
            if (head = true) {
                 sprite_index = cent_down_spr;
            } else {
                 sprite_index = body_down_spr;
            }
       }
       //Steps 11-13
       if (switch_step &gt;= 11) &amp;&amp; (switch_step &lt;= 13) {
            image_xscale = 1
            if (head = true) {
                 sprite_index = cent_angle_spr;
            } else {
                 sprite_index = body_angle_spr;
            }
       }
       //Move Snap at the beginning and end of path
       if (switch_step = 0) then {move_snap(4,8)};
       if (switch_step = 14) then {move_snap(4,8)};
    
      }//end switch_type = 2
    
    
    
    //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
    ////SWITCH TYPE 3: Going LEFT CYCLE &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
    //move_mode = 2VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
    
       if (switch_type = 3) {
            if (path_set = 1) {
                 image_xscale = 1
                 move_snap(4,8)
                 path_set = 0;
                 step_x[0] = x; step_x[1] = x-1; step_x[2] = x-2; step_x[3] = x-3;
                 step_x[4] = x-4; step_x[5] = x-4; step_x[6] = x-4; step_x[7] = x-3;
                 step_x[8] = x-2; step_x[9] = x-1; step_x[10] = x; step_x[11] = x;
                 step_x[12] = x; step_x[13] = x; step_x[14] = x;
                 step_y[0] = y; step_y[1] = y; step_y[2] = y+1; step_y[3] = y+2;
                 step_y[4] = y+3; step_y[5] = y+4; step_y[6] = y+5; step_y[7] = y+6;
                 step_y[8] = y+7; step_y[9] = y+8; step_y[10] = y+8;
                 step_y[11] = y+8; step_y[12] = y+8; step_y[13] = y+8;
                 step_y[14] = y+8
                 switch_step = 0
        }
    
       //Path End, Change Movement
       if (switch_step &gt;= 9) {
         switch_step = 9
         if (y &gt;= 239) &amp;&amp; (global_game_obj.cells[x div 8 + 1, y div 8] = 1)
          or (y &gt;= 239) &amp;&amp; (collision_point(x+7,y+4,side_wall_obj,true,true)) {
              move_mode = 3; vdir = 2; switch_type = 3; path_set = 1;
         } else {
              if (global_game_obj.cells[x div 8 + 1, y div 8] = 1)
               or (collision_point(x+7,y+4,side_wall_obj,true,true))
               or (super_mushroom = true) {
                   switch_type = 4
                   path_set = 1
              } else {
                   hdir = 2
                   image_xscale = -1
                   move_mode = 1
                   switch_step = 10
                   switch_type = 0
              }
         }
       }//end path end
    
       //Maximum Step 9, if greater set it to 9; increase step
       if (switch_step + spd &lt; 9) {
            switch_step += spd
       } else {
            if (switch_step + spd &gt;= 9) {
                 switch_step = 9
            }
       }
    
       //Set X and Y to Path, round the step to plug into array
       round(switch_step);
       x = step_x[switch_step];
       y = step_y[switch_step];
    
       //Set Sprite Images Correctly//
       //Steps 1-4
       if (switch_step &gt;= 1) &amp;&amp; (switch_step &lt;= 4) {
            image_xscale = 1
            if (head = true) {
                 sprite_index = cent_angle_spr;
            } else {
                 sprite_index = body_angle_spr;
            }
       }
       //Step 5
       if (switch_step = 5) {
            image_xscale = 1;
            if (head = true) {
                 sprite_index = cent_down_spr;
            } else {
                 sprite_index = body_down_spr;
            }
       }
       //Steps 6-9
       if (switch_step &gt;= 6) &amp;&amp; (switch_step &lt;= 9) {
            image_xscale = -1
            if (head = true) {
                 sprite_index = cent_angle_spr;
            } else {
                 sprite_index = body_angle_spr;
            }
       }
        //At beginning and end of path, move snap
        if (switch_step = 0) then {move_snap(4,8)};
        if (switch_step = 10) then {move_snap(4,8)};
    
      }//end switch_type = 3
    
    
    
    //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
    ////SWITCH TYPE 4: Going RIGHT CYCLE &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
    //move_mode = 2VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
    
       if (switch_type = 4) {
            //sets the curved path that centipede will take
            if (path_set = 1) {
                 image_xscale = 1;
                 move_snap(4,8);
                 path_set = 0;
                 step_x[0] = x; step_x[1] = x+1; step_x[2] = x+2; step_x[3] = x+3;
                 step_x[4] = x+4; step_x[5] = x+4; step_x[6] = x+4; step_x[7] = x+3;
                 step_x[8] = x+2; step_x[9] = x+1; step_x[10] = x; step_x[11] = x;
                 step_x[12] = x; step_x[13] = x; step_x[14] = x
                 step_y[0] = y; step_y[1] = y; step_y[2] = y+1; step_y[3] = y+2;
                 step_y[4] = y+3; step_y[5] = y+4; step_y[6] = y+5; step_y[7] = y+6;
                 step_y[8] = y+7; step_y[9] = y+8; step_y[10] = y+8;
                 step_y[11] = y+8; step_y[12] = y+8; step_y[13] = y+8;
                 step_y[14] = y+8
                 switch_step = 0;
            }
    
       //End of Path, Change Movement
       if (switch_step &gt;= 9) {
    
            switch_step = 9
    
            //If Stuck in a Corner, Reverse Direction
            if (y &gt;= 239) &amp;&amp; (global_game_obj.cells[abs(x div 8 - 1), y div 8] = 1)
             or (y &gt;= 239) &amp;&amp; (collision_point(x-7,y+4,side_wall_obj,true,true)) {
                 move_mode = 3; vdir = 2; switch_type = 4; path_set = 1;
            } else {
                 if (global_game_obj.cells[abs(x div 8 - 1), y div 8] = 1)
                  or (collision_point(x-7,y+4,side_wall_obj,true,true))
                  or (super_mushroom = true) {
                      switch_type = 3
                      path_set = 1
                 } else {
                      hdir = 1
                      image_xscale = 1
                      move_mode = 1
                      switch_step = 10
                      switch_type = 0
                 }
            }
       }//end Change Movement
    
       //Increase Switch_Step if under 9, if over cap it to 9
       if (switch_step + spd &lt; 9) {
            switch_step += spd
       } else {
            if (switch_step + spd &gt;= 9) {
                 switch_step = 9
            }
       }
    
       //Round Switch_Step to plug into array,
       //Set X and Y Values to Path
       round(switch_step);
       x = step_x[switch_step];
       y = step_y[switch_step];
    
       //Set Sprite Image Correctly
       //Steps 1-3
       if (switch_step &gt;= 1) &amp;&amp; (switch_step &lt;= 3) {
            image_xscale = -1;
            if (head = true) {
                 sprite_index = cent_angle_spr;
            } else {
                 sprite_index = body_angle_spr;
            }
       }
       //Steps 4-6
       if (switch_step &gt;= 4) &amp;&amp; (switch_step &lt;= 6) {
            image_xscale = 1;
            if (head = true) {
                 sprite_index = cent_down_spr;
            } else {
                 sprite_index = body_down_spr;
            }
       }
       //Steps 7-9
       if (switch_step &gt;= 7) &amp;&amp; (switch_step &lt;= 9) {
            image_xscale = 1;
            if (head = true) {
                 sprite_index = cent_angle_spr;
            } else {
                 sprite_index = body_angle_spr;
            }
       }
       //Move Snap at beginning and end of path
       if (switch_step = 0) then {move_snap(4,8)};
       if (switch_step = 10) then {move_snap(4,8)};
       }
      }
    
    
    
    
    
     //((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((//
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
    ////////MOVE MODE = 3: UPWARD Arc Motion////////////////////////////////////////
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
    //))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))//
    
    
    if (move_mode = 3) {
    
         dont_check_head = true //do not check if head or body during this time
    
    
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
    ///////SWITCH_TYPE 1 Starting going LEFT&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
    //move_mode = 3 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
      if (switch_type = 1) {
           //sets the curved path that centipede will take
           if (path_set = 1) {
    
                image_xscale = 1
                path_set = 0;
                step_x[0] = x-4; step_x[1] = x-5; step_x[2] = x-6; step_x[3] = x-7;
                step_x[4] = x-8; step_x[5] = x-8; step_x[6] = x-8; step_x[7] = x-7;
                step_x[8] = x-6; step_x[9] = x-5; step_x[10] = x-4;
                step_x[11] = x-3; step_x[12] = x-2; step_x[13] = x-1; step_x[14] = x
                step_y[0] = y-8; step_y[1] = y-8; step_y[2] = y-7; step_y[3] = y-6;
                step_y[4] = -5; step_y[5] = y-4; step_y[6] = y-3; step_y[7] = y-2;
                step_y[8] = y-1; step_y[9] = y; step_y[10] = y; step_y[11] = y;
                step_y[12] = y; step_y[13] = y; step_y[14] = y
                switch_step = 14;
           }
           //End Path, Change Motion
           if (switch_step &lt;= 1) {
                switch_step = 1
                     if collision_line(x+9,y+4,x+8,y+4,mushroom_obj,true,true)
                      or collision_line(x+9,y+4,x+8,y+4,side_wall_obj,true,true) {
                          move_snap(8,8); switch_type = 4; path_set = 1
                     } else {
                          move_snap(8,8); hdir = 2; image_xscale = -1; move_mode = 1
                          switch_step = 0; switch_type = 0
                    }
           }//end End Path, Change Motion
    
        //decrease switch_step if greater than 1, else set it to 1
        if (switch_step - spd &gt; 1) then {switch_step -= spd};
        if (switch_step - spd &lt;= 1) then {switch_step = 1};
    
        //round switch_step to plug it into array
        round(switch_step);
        //X and Y Values are set according to path
        x = step_x[switch_step]; y = step_y[switch_step];
    
        //Set the Sprite Image Correctly
        //Steps 0-4
        if (switch_step &gt;= 0) &amp;&amp; (switch_step &lt;= 4) {
             image_xscale = -1
             if (head = true) {
                  sprite_index = cent_forward_spr;
             } else {
                  sprite_index = body_forward_spr;
             }
        }
        //Steps 5-7
        if (switch_step &gt;= 5) &amp;&amp; (switch_step &lt;= 7) {
             image_xscale = -1
             if (head = true) {
                  sprite_index = cent_angle_up_spr;
             } else {
                  sprite_index = body_angle_up_spr;
             }
        }
        //Steps 8-10
        if (switch_step &gt;= 8) &amp;&amp; (switch_step &lt;= 10) {
             image_xscale = 1;
             if (head = true) {
                  sprite_index = cent_up_spr;
             } else {
                  sprite_index = body_up_spr;
             }
        }
        //Steps 11-13
        if (switch_step &gt;= 11) &amp;&amp; (switch_step &lt;= 13) {
             image_xscale = 1;
             if (head = true) {
                  sprite_index = cent_angle_up_spr;
             } else {
                  sprite_index = body_angle_up_spr;
             }
        }
        //Move Snap at the beginning and end of the path
        if (switch_step = 0) then {move_snap(8,8)};
        if (switch_step = 14) then {move_snap(8,8)};
       }
    
    
    
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
    ///////SWITCH_TYPE 2 Starting going RIGHT&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
    //move_mode = 3 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
    
       if (switch_type = 2) {
            //sets the curved path that centipede will take
            if (path_set = 1) {
                 image_xscale = 1;
                 path_set = 0;
                 step_x[0] = x+4; step_x[1] = x+5; step_x[2] = x+6; step_x[3] = x+7;
                 step_x[4] = x+8; step_x[5] = x+8; step_x[6] = x+8; step_x[7] = x+7;
                 step_x[8] = x+6; step_x[9] = x+5; step_x[10] = x+4;
                 step_x[11] = x+3; step_x[12] = x+2; step_x[13] = x+1;
                 step_x[14] = x; step_y[0] = y-8; step_y[1] = y-8; step_y[2] = y-7;
                 step_y[3] = y-6; step_y[4] = -5; step_y[5] = y-4; step_y[6] = y-3;
                 step_y[7] = y-2; step_y[8] = y-1; step_y[9] = y; step_y[10] = y;
                 step_y[11] = y; step_y[12] = y; step_y[13] = y; step_y[14] = y;
                 switch_step = 14;
            }
    
       //End Path, Change Motion
       if (switch_step &lt;= 1) {
            switch_step = 1;
            if (collision_point(x-9,y-4,mushroom_obj,true,true))
             or (collision_point(x-9,y-4,side_wall_obj,true,true)) {
                 move_snap(8,8); switch_type = 3; path_set = 1;
            } else {
                 move_snap(8,8); hdir = 1; image_xscale = 1; move_mode = 1;
                 switch_step = 0; switch_type = 0;
            }
        }
    
       if (switch_step - spd &gt; 1) {
            switch_step -= spd;
       } else {
            if (switch_step - spd &lt;= 1) {
                 switch_step = 1;
            }
       }
       //Round switch_step to plug it into the array
       round(switch_step);
       //set the X and Y Values according to the path
       x = step_x[switch_step]; y = step_y[switch_step];
    
       //Set the Sprite Image Correctly
       //Steps 0-4
       if (switch_step &gt;= 0) &amp;&amp; (switch_step &lt;= 4) {
            image_xscale = 1;
            if (head = true) {
                 sprite_index = cent_forward_spr;
            } else {
                 sprite_index = body_forward_spr;
            }
       }
       //Steps 5-7
       if (switch_step &gt;= 5) &amp;&amp; (switch_step &lt;= 7) {
            image_xscale = 1;
            if (head = true) {
                 sprite_index = cent_angle_up_spr;
            } else {
                 sprite_index = body_angle_up_spr;
            }
       }
       //Steps 8-10
       if (switch_step &gt;= 8) &amp;&amp; (switch_step &lt;= 10) {
            image_xscale = 1;
            if (head = true) {
                 sprite_index = cent_up_spr;
            } else {
                 sprite_index = body_up_spr;}
       }
       //Steps 11-13
       if (switch_step &gt;= 11) &amp;&amp; (switch_step &lt;= 13) {
            image_xscale = -1;
            if (head = true) {
                 sprite_index = cent_angle_up_spr;
            } else {
                 sprite_index = body_angle_up_spr;
            }
       }
    
       if (switch_step = 0) then {move_snap(8,8)};
       if (switch_step = 14) then {move_snap(8,8)};
    
    }//end switch_type = 2
    
    
    
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
    ///////SWITCH_TYPE 3  Going LEFT Cycle&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
    //move_mode = 3 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
    
       if (switch_type = 3) {
            //sets the curved path that centipede will take
            if (path_set = 1) {
                 image_xscale = 1; move_snap(1,8); path_set = 0;
                 step_x[0] = x; step_x[1] = x-1; step_x[2] = x-2; step_x[3] = x-3;
                 step_x[4] = x-4; step_x[5] = x-4; step_x[6] = x-4; step_x[7] = x-3;
                 step_x[8] = x-2; step_x[9] = x-1; step_x[10] = x;
                 step_y[0] = y-8; step_y[1] = y-8; step_y[2] = y-7; step_y[3] = y-6;
                 step_y[4] = y-5; step_y[5] = y-4; step_y[6] = y-3; step_y[7] = y-2;
                 step_y[8] = y-1; step_y[9] = y; step_y[10] = y;
                 switch_step = 10;
            }
    
            //Path End, Change Motion
            if switch_step &lt;= 1 {
                 switch_step = 1
                 if (y &lt;= 201) &amp;&amp; (collision_point(x+9,y-4,mushroom_obj,true,true))
                  or (y &lt;= 201)
                  &amp;&amp; (collision_point(x+9,y-4,side_wall_obj,true,true)) {
                       move_snap(8,8); move_mode = 2; vdir = 1;
                       switch_type = 3; path_set = 1;
                 } else {
                       if (collision_point(x+9,y-4,mushroom_obj,true,true))
                        or (collision_point(x+9,y-4,side_wall_obj,true,true)) {
                            move_snap(8,8); switch_type = 4; path_set = 1;
                       } else {
                            move_snap(8,8); hdir = 2; image_xscale = -1;
                            move_mode = 1; switch_step = 0; switch_type = 0;
                       }
                 }
            }//end Path End, Change Motion
       //Reduce switch_step unless under 1, set it to 1
       if (switch_step - spd &gt; 1) {
            switch_step -= spd;
       } else {
            if (switch_step - spd &lt;= 1) {
                 switch_step = 1;
            }
       }
    
       //Round switch_step to apply it to the array
       round(switch_step);
       //Set X and Y Values according to the path
        x = step_x[switch_step]; y = step_y[switch_step];
    
        //Set the Sprite Image Correctly
        //Steps 1-4
        if (switch_step &gt;= 1) &amp;&amp; (switch_step &lt;= 4) {
             image_xscale = -1;
             if (head = true) {
                  sprite_index = cent_angle_up_spr;
             } else {
                  sprite_index = body_angle_up_spr;
             }
        }
        //Step 5
        if (switch_step = 5) {
             image_xscale = 1;
             if (head = true) {
                  sprite_index = cent_up_spr;
             } else {
                  sprite_index = body_up_spr;
             }
        }
        //Step 6-9
        if (switch_step &gt;= 6 &amp;&amp; switch_step &lt;= 9) {
             image_xscale = 1;
             if head=true {
                  sprite_index = cent_angle_up_spr;
             } else {
                  sprite_index = body_angle_up_spr;
             }
        }
        if switch_step = 0 then move_snap(8,8); if switch_step = 10 then move_snap(8,8);
    
    }//end switch_type = 3
    
    
    
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
    ///////SWITCH_TYPE 4  Going RIGHT Cycle&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
    //move_mode = 3 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//
    
       if switch_type = 4 {
            //sets the curved path that centipede will take
            if path_set = 1 {
                 image_xscale = 1; move_snap(1,8); path_set = 0;
                 step_x[0] = x; step_x[1] = x+1; step_x[2] = x+2; step_x[3] = x+3;
                 step_x[4] = x+4; step_x[5] = x+4; step_x[6] = x+4; step_x[7] = x+3;
                 step_x[8] = x+2; step_x[9] = x+1; step_x[10] = x
                 step_y[0] = y-8; step_y[1] = y-8; step_y[2] = y-7; step_y[3] = y-6;
                 step_y[4] = y-5; step_y[5] = y-4; step_y[6] = y-3; step_y[7] = y-2;
                 step_y[8] = y-1; step_y[9] = y; step_y[10] = y
                 switch_step = 10
            }
    
            //Path End, Change Motion
            if switch_step &lt;= 1 {
                 switch_step = 1;
                 if (y &lt;= 201) &amp;&amp; (collision_point(x-9,y-4,mushroom_obj,true,true))
                  or (y &lt;= 201) &amp;&amp;
                  (collision_point(x-9,y-4,side_wall_obj,true,true)) {
                       move_snap(8,8) ; move_mode = 2; vdir = 1;
                       switch_type = 4;path_set = 1
                 } else {
                       if collision_point(x-9,y-4,mushroom_obj,true,true)
                        or collision_point(x-9,y-4,side_wall_obj,true,true) {
                            move_snap(8,8); switch_type = 3; path_set = 1;
                       } else {
                            move_snap(8,8); hdir = 1; image_xscale = 1;
                            move_mode = 1; switch_step = 0; switch_type = 0;
                       }
    
                  }
            }//end Path End, Change Motion
    
       //Reduce switch_step unless smaller than 1, set it to 1
       if (switch_step - spd &gt; 1) {
            switch_step -= spd;
       } else {
            if switch_step - spd &lt;= 1 {
                 switch_step = 1
            }
       }
    
       //Round switch_step to apply it to the step array
       round(switch_step);
       //X and Y Values changed according to the Path
       x = step_x[switch_step]; y = step_y[switch_step];
    
       //Change to the Correct Sprite Images
       //Steps 1-3
       if (switch_step &gt;= 1) &amp;&amp; (switch_step &lt;= 3) {
            image_xscale = 1;
            if (head = true) {
                 sprite_index = cent_angle_up_spr;
            } else {
                 sprite_index = body_angle_up_spr;
            }
       }
       //Steps 4-6
       if (switch_step &gt;= 4) &amp;&amp; (switch_step &lt;= 6) {
            image_xscale = 1;
            if (head = true) {
                 sprite_index = cent_up_spr;
            } else {
                 sprite_index = body_up_spr;
            }
       }
       //Steps 7-9
       if (switch_step &gt;= 7) &amp;&amp; (switch_step &lt;= 9) {
            image_xscale = -1;
            if (head = true) {
                 sprite_index = cent_angle_up_spr;
            } else {
                 sprite_index = body_angle_up_spr;
            }
       }
       //Move Snap at the beginning and end of the path
       if (switch_step = 0) then {move_snap(8,8)};
       if (switch_step = 10) then {move_snap(8,8)};
    
    }//end switch_type = 4
    
    
    
    }//end move_type = 3
}//End if (all_stop == true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="temp_mushroom_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>super_mushroom = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="centipede_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This code will fix the aesthetically weird instance where two
//broken centipedes combine. This will keep them from combining
//by keeping intruding centipedes moving
 if (other.age &gt; age + (8/spd + 2)) or (other.age &lt; age - (8/spd + 2)) {

     if (move_mode == 1) &amp;&amp; (hdir == other.hdir) &amp;&amp; (other.age &gt; age){
         go_down = true;
     }
     
     if (hdir == other.hdir) then exit;
     if (can_move == false) then exit; //can_move prevents infinite cycling V/^;
     collision_time += 1;
     can_move = false; //trigger off
     alarm[0] = 10; //alarm turns can_move to true



     //MOVE MODE = 2///////////////////
     if (move_mode == 2) {

          if (switch_type == 1) {
               if (switch_step &gt;= 13) {
                    path_set = 1;
                    switch_type = 4;
               }
          }

          if (switch_type == 2) {
               if (switch_step &gt;= 13) {
                    path_set = 1;
                    switch_type = 3;
               }
          }

          if (switch_type == 3) {
               if (switch_step &gt;= 9) {
                    path_set = 1;
                    switch_type = 4;
               }
          }

          if (switch_type == 4) {
               if (switch_step &gt;= 9) {
                    path_set = 1;
                    switch_type = 3;
               }
          }
     }
     //MOVE MODE = 3//////////////////
     if (move_mode == 3) {

          if (switch_type == 1) {
               if (switch_step &lt;= 1) {
                    path_set = 1;
                    switch_type = 4;
               }
          }

          if (switch_type == 2) {
               if (switch_step &lt;= 1) {
                    path_set = 1;
                    switch_type = 3;
               }
          }

          if (switch_type == 3) {
               if (switch_step &gt;= 1) {
                    path_set = 1;
                    switch_type = 4;
               }
          }

          if (switch_type == 4) {
               if (switch_step &gt;= 1) {
                    path_set = 1;
                    switch_type = 3;
               }
          }
     }

 }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="grasshopper_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.ghgame = 5
{
 if injure = 0 then injure = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="super_mushroom_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>super_mushroom = true

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="laser_obj">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>explode_obj</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If a Head set the score + 100
//If a regular body part + 10
if (global.demo = false) {
     if (head = true) or (global.cent_justdied = 1) {
          score += 100; global.cent_justdied = 1; global_game_obj.die_counter = 0;
     } else {
           score += 10; global.cent_justdied = 1; global_game_obj.die_counter = 0;
     }
}

//When the centipede dies it will drop a mushroom one column left if going left
//and one column right if going right
if (hdir = 1) then instance_create(abs(x div 8-1)*8,y,mushroom_obj)
if (hdir = 2) then instance_create((x div 8+1)*8,y,mushroom_obj)

//When a super mushroom centipede is destroyed, it leaves behind a temp_mushroom
//object which sobers the centipede as well as the rest of the ones behind.
if super_mushroom = 1 then instance_create(x,y,temp_mushroom_obj)

global_game_obj.bug_drop -= 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ship_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This code for colliding with player when the player is invincible
if (!object_exists(ship_obj)) {
    exit;
}

if (other.invincible == true) {
            //create self explosion obj (animation)
    instance_create(x,y,explode_obj);
    
    //Set the Score to 100 if a Head
    //and 10 if a regular body part
    if (global.demo = false) {
         if (head = true) {
              score += 100
         } else {
              if (head = false) {
                   score += 10
              }
         }
    }
    
    //When Dead, Create a Mushroom to the left if going left or to the right
    //if going right
    if (hdir = 1) then {instance_create(abs(x div 8*8 - 1), y div 8*8,mushroom_obj)}
    if (hdir = 2) then {instance_create(x div 8*8 + 1,y div 8*8,mushroom_obj)}
    
    //Create Many Explosions in random nearby locations
    instance_create(x-4,y,explode_obj);
    for (var i; i &lt;= 6; i++) {
        instance_create(x-12 + random(16),y-8+random(16),explode_obj);
    }
    
        //Destroy Self
    instance_destroy();
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
