<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ship_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>ship_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hor_lock</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vert_lock</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = 0
alarm[0] = 10
hor_lock = false //stops movement horizontally if true
vert_lock = false //stops movement vertically if true
image_speed = 0
spd = 0; //ship speed variable
move_type = 9 + round(ceil(random(2)))
move_counter =0
collision = 0
distance = 2 //distance used to check against collisions with shrooms and walls
invincible = false
hdir = round(ceil(random(2)));
vdir = 1;
demo_max_speed = 3
global.mushroom_hunter = 0
mouse_dist = round(distance_to_point(mouse_x,mouse_y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_outside_solid(direction+180,4)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_outside_solid(direction+180,4)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movement code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//////////////////////////////////////////////////////////////
//Check at All Times//////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

if (collision_rectangle(x-6,y-6,x+14,y+14,block_obj,true,true)) {
     speed = 1; move_snap(1,1); move_outside_solid(direction+180,8);
}

if !place_meeting(x,y+2,block_obj) &amp;&amp; !place_meeting(x,y-2,block_obj)
&amp;&amp; !place_meeting (x+2,y,block_obj) &amp;&amp; !place_meeting(x-2,y,block_obj) {
     collision = false;
}
//sets right color according to level
//if invincible, then rainbow colors!
if (invincible = false) {image_index = global.level-1; image_speed = 0};
if (invincible = true) then {image_speed = 1};


////Check Freedom of Movement in Game Play Mode////
if (global.demo = false) {
   //Check For Horizontal Collisions
           //LEFT check
if (mouse_x &lt; x) &amp;&amp; (place_meeting(x-distance-4,y,block_obj)) { //left, with block
     hor_lock = true; collision = true; move_type = 2; move_snap(8,1)
} else {
     if (mouse_x &lt; x) &amp;&amp; !(place_meeting(x-distance-4,y,block_obj)) { //left, no block
          hor_lock = false;
     } else {
          if !(mouse_x &lt; x) &amp;&amp; (place_meeting(x-distance-4,y,block_obj)) { //mouse not left, block left
               hor_lock = false;
          }
     }
}

           //RIGHT check
if (mouse_x &gt; x) &amp;&amp; (place_meeting(x+distance+4,y,block_obj)) { //right, with block
     hor_lock = true; collision = true;move_type = 2;move_snap(8,1)
} else {
     if (mouse_x &gt; x) &amp;&amp; !(place_meeting(x+distance+4,y,block_obj)) { //right, no block
          hor_lock = false;  //can move horizontally
     } else {
          if !(mouse_x &gt; x) &amp;&amp; (place_meeting(x+distance+4,y,block_obj)) { //mouse not right, block right
               hor_lock = false;  //can move horizontally
          }
     }
}

   //Check for Vertical Collisions
           //UP check
if (mouse_y &lt; y) &amp;&amp; (place_meeting(x,y-distance-4,block_obj)) { //up, with block
     vert_lock = true; collision = true; move_type = 3; move_snap(1,8);
} else {
     if (mouse_y &lt; y) &amp;&amp; !(place_meeting(x,y-distance-4,block_obj)) { //up, no block
          vert_lock = false;  //can move vertically
     } else {
          if !(mouse_y &lt; y) &amp;&amp; (place_meeting(x,y-distance-4,block_obj)) { //mouse not up, with block
               vert_lock = false; //can move vertically
          }
     }
}
           //DOWN check
if (mouse_y &gt; y) &amp;&amp; (place_meeting(x,y+distance+4,block_obj)) { //down, with block
     vert_lock = true; collision = true; move_type = 3; move_snap(1,8)
} else {
     if (mouse_y &gt; y) &amp;&amp; !(place_meeting(x,y+distance+4,block_obj)) { //down, no block
          vert_lock = false //can move vertically
     } else {
          if !(mouse_y &gt; y) &amp;&amp; (place_meeting(x,y+distance+4,block_obj)) { //mouse not down, with block
               vert_lock = false;
          }
     }
}

}//end global.demo = false



//////////////////////////////////////////////////////////////
//Pre-game Demo//////////////////////////////////////////////
//global.game_mode = 0////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

if global.demo = true {
     //always fire laser when there is no laser currently being fired
     if (instance_number(laser_obj) = 0) {
          instance_create(x,y-2,laser_obj)
     }
     //Set the direction depending on ship location
     if (x &gt;= 224) then {x = 224; hdir = 1;}
     if (x &lt;= 8) then {x = 8; hdir = 2;}
     if (y &gt;= 236) then {y = 236; vdir = 1;}
     if (y &lt;= 200) then {y = 200; vdir = 2;}
     //Set the trajectory depending on its direction
     if (hdir = 1) &amp;&amp; (vdir = 1) then {destination_x = x-10; destination_y = y-10}
     if (hdir = 2) &amp;&amp; (vdir = 2) then {destination_x = x+10; destination_y = y+10}
     if (hdir = 1) &amp;&amp; (vdir = 2) then {destination_x = x-10; destination_y = y+10}
     if (hdir = 2) &amp;&amp; (vdir = 1) then {destination_x = x+10; destination_y = y-10}

     if (global.all_stop = true) then {speed = 0; exit;}
     destination_dist = round(distance_to_point(destination_x,destination_y)) //sets the variable mouse_dist
     //Execute the move phases during demo mode
     if (move_type = 10) { //This phase moves for 2 seconds and goes to move_type 11
          move_counter += 1; //This is a timer variable for moving/waiting
          spd = round(destination_dist*3/4); //The ship_obj speed
          if (spd &gt; demo_max_speed) then {spd = demo_max_speed};
          move_towards_point(destination_x,destination_y,spd); //Moves toward set location
          if (move_counter &gt;= 60) then {move_counter = 0; move_type = 11;} //Resets counter at 2 Sec, switch move_type
     }

     if (move_type = 11) { //This phase stops for 2 seconds and goes back to move_type 10
          move_counter +=1 //Timer variable for moving/waiting
          speed = 0 //Stops your movement
          if move_counter &gt;= 60 then {move_counter = 0; move_type = 10;} //Resets counter at 2 Sec, switch move_type
     }
     if (move_type = 12) {
          move_counter += 1; //This is a timer variable for moving/waiting
          move_towards_point(x,destination_y,spd)
          spd = 4
          if (spd &gt; demo_max_speed) then {spd = demo_max_speed};
          if (move_counter &gt;= 60) then {move_counter = 0; move_type = 11;}
     }
     if (move_type = 13) {
          spd = 4
          move_counter += 1; //This is a timer variable for moving/waiting
          move_towards_point(destination_x,y,spd)
          if (spd &gt; demo_max_speed) then {spd = demo_max_speed};
          if (move_counter &gt;= 60) then {move_counter = 0; move_type = 11};
     }

////Check Freedom of Movement in demo Mode////
     //Check For Horizontal Collisions
     //LEFT check
     if (destination_x &lt; x) &amp;&amp; (place_meeting(x-distance-4,y,block_obj)) { //left, with block
          hor_lock = true; collision = true; move_snap(8,1);
          if (move_type = 10) {
               move_type = 12;
          }
     } else {
          if (destination_x &lt; x) &amp;&amp;
          (not place_meeting(x-distance-4,y,block_obj)) { //left, no block
               hor_lock = false;
          } else {
               if (not destination_x &lt; x) &amp;&amp;
               (place_meeting(x-distance-4,y,block_obj)) { //mouse not left, block left
                   hor_lock = false;
               }
          }
     }

     //RIGHT check
     if (destination_x &gt; x) &amp;&amp; (place_meeting(x+distance+4,y,block_obj)) { //right, with block
          hor_lock = true; collision = true; move_snap(8,1);
          if (move_type = 10) {
               move_type = 12;
          }
     } else {
          if (destination_x &gt; x) &amp;&amp;
          (not place_meeting(x+distance+4,y,block_obj)) { //right, no block
               hor_lock = false;  //can move horizontally
          } else {
               if (not destination_x &gt; x) &amp;&amp;
               (place_meeting (x+distance+4,y,block_obj)) { //mouse not right, block right
                    hor_lock = false;  //can move horizontally
               }
          }
     }

     //Check for Vertical Collisions
     //UP check
     if (destination_y &lt; y) &amp;&amp; (place_meeting(x,y-distance-1,block_obj)) { //up, with block
          vert_lock = true; collision = true; move_snap(1,8)
          if (move_type = 10) {
               move_type = 13;
          }
     } else {
          if (destination_y &lt; y) &amp;&amp;
          (not place_meeting(x,y-distance-1,block_obj)) { //up, no block
               vert_lock = false;  //can move vertically
          } else {
               if (not destination_y &lt; y) &amp;&amp;
               (place_meeting(x,y-distance-1,block_obj)) { //mouse not up, with block
                    vert_lock = false; //can move vertically
               }
          }
     }

           //DOWN check
     if (destination_y &gt; y) &amp;&amp; (place_meeting(x,y+distance+4,block_obj)) {//down, with block
          vert_lock = true; collision = true; move_snap(1,8)
          if (move_type = 10) {
               move_type = 13;
          }
     } else {
          if (destination_y &gt; y) &amp;&amp;
          (not place_meeting(x,y+distance+4,block_obj)) { //down, no block
               vert_lock = false //can move vertically
          } else {
               if (not destination_y &gt; y) &amp;&amp;
               (place_meeting(x,y+distance+4,block_obj)) { //mouse not down, with block
                    vert_lock = false;
               }
          }
     }


     if (collision = false) {
          if (move_type = 12) or (move_type = 13) {
               move_type = 10;
          }
     }

     if (spd &gt; demo_max_speed) {
          spd = demo_max_speed
     }

}//end global.demo = true


//////////////////////////////////////////////////////////////
//Game-Play///////////////////////////////////////////////////
//global.game_mode = 1////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
if global.game_mode = 1 {

     //Cut off this code if global.all_stop is true
     if (global.all_stop = true) then {speed = 0; exit;}

     //Check Mouse Distance from Ship
     //this code corrects the jerky-motion bug that move_towards_point causes
     mouse_dist = round(distance_to_point(mouse_x,mouse_y)) //sets the variable mouse_dist

     //Calculate the spd of the Ship depending on what move_type it is in
     if (move_type = 1) then {spd = round(mouse_dist*3/4)};
     if (move_type = 2) then {spd = round(abs(mouse_y-y)*3/4)};
     if (move_type = 3) then {spd = round(abs(mouse_x-x)*3/4)};

     //Max Speed during gameplay is 8
     if (global.demo = false) {
          if (spd &gt; 8) {
               spd = 8
          }
     }
      //X and Y axis boundaries for ship
     if (x &gt;= 232) then {x = 232}; if (x &lt;= 0) then {x = 0};
     if (y &gt;= 240) then {y = 240}; if (y &lt;= 200) then {y = 200};

     //Stop movement and align to mouse if close by mouse
     //otherwise move towards mouse
     if (mouse_dist &lt;= 4) &amp;&amp; (collision = false) { //if ship is in very close range
          speed = 0; x=mouse_x; y=mouse_y; //set speed to 0 &amp; align ship to mouse
     } else {
          if (mouse_dist &lt;= 4) &amp;&amp; (y &gt;=240) {
               speed = 0; x=mouse_x; y=mouse_y
          } else {
               if (collision = true) &amp;&amp; (mouse_dist &lt;= 4) &amp;&amp; (y &lt;= 200) {
                    speed = 0; x=mouse_x; y=mouse_y;
               } else {
                    if (collision = true) &amp;&amp; (mouse_dist &lt;= 4) &amp;&amp; (x &lt;= 0) {
                         speed = 0; x=mouse_x; y=mouse_y;
                    } else {
                         if (collision = true) &amp;&amp; (mouse_dist &lt;= 4) &amp;&amp; (x &gt;= 232) {
                              speed = 0; x=mouse_x; y=mouse_y;
                         } else {  //otherwise continue mouse pursuit
                              move_towards_point(mouse_x,mouse_y,spd);
                         }
                    }
               }
          }
     }


     move_snap(1,1)

    //If Ship is hitting horizontal boundaries set the direction
     if (x &gt;= 240) &amp;&amp; (mouse_x &gt;= 240) or (x &lt;= 0) &amp;&amp; (mouse_x &lt;= 0) {

          move_type = 2

          if (mouse_y &gt; y) &amp;&amp; (!place_meeting(x,y+distance,block_obj)) {
               direction = 270;
          }
          if (mouse_y &lt; y) &amp;&amp; (!place_meeting(x,y-distance,block_obj)) {
               direction = 90;
          }

     } else {
          //If Ship is hitting the vertical boundaries set the direction
          if (y &gt;= 236) &amp;&amp; (mouse_y &gt;= 236) or (y &lt;= 200) &amp;&amp; (mouse_y &lt;= 200) {
               vmove = 1
               if (mouse_x &gt; x) &amp;&amp; (!place_meeting(x+distance,y,block_obj)) {
                    direction = 0;
               }
              if (mouse_x &lt; x) &amp;&amp; (!place_meeting(x-distance,y,block_obj)) {
                   direction = 180;
              }

          move_type = 3

          } else {
               move_type = 1;
          }
     }

     //Sets the speed when locked in certain directions
     if (hor_lock = 1) &amp;&amp; (vert_lock = 1) {
          hspeed = 0; vspeed = 0; move_outside_solid(direction+180,4)
     }
     if (hor_lock = 1) &amp;&amp; (vert_lock = 0) {
          hspeed = 0
     }
     if (hor_lock = 0) &amp;&amp; (vert_lock = 1) {
          vspeed = 0
     }


}//end global.game_mode = 1

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//global.game_mode = 2////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Fire Laser</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if can_shoot = 0 then exit;
if (global.all_stop = true) {
     exit;
}

if mouse_check_button(mb_left) or keyboard_check(vk_space) {

     if global.game_mode = 1 {
          if instance_number(laser_obj) = 0 {
               if (sound_isplaying(ship_fire_snd)) {
                    sound_stop(ship_fire_snd);
               }
               sound_play(ship_fire_snd);
               instance_create(x,y-2,laser_obj)
          }
     }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.game_mode = 1
{
if global.cheating = true {


if keyboard_check_pressed(ord("I")) {
     if invincible = true then {invincible = false; sound_play(power_down1)}
     else if invincible = false then {invincible = true; sound_play(power_up1)}
}

if keyboard_check_pressed(ord("H")) {
     if global.mushroom_hunter = true then {global.mushroom_hunter = false;sound_play(power_down1);}
     else if global.mushroom_hunter = false then {global.mushroom_hunter = true; sound_play(power_up1);}
}

if keyboard_check(ord("S")) then score += 500;

if keyboard_check_pressed(ord("L")) {
     lives += 1;
     if sound_isplaying(extra_life_snd) then sound_stop(extra_life_snd);
     sound_play(extra_life_snd);
}





}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="block_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_snap(2,2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="enemy_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invincible = true) {
     if (global.demo = false) {
          sound_play(enemy_die_snd)
     } exit;
}

if (global.demo = true) &amp;&amp; (global.game_mode = 0) {
     global.centipede_regen = false;
     with other {instance_destroy();}
     instance_destroy();
     instance_create(x-4,y,player_die_obj);
     global.game_mode = 3;
     instance_create(other.x+other.explodex,other.y+other.explodey,explode_obj);
}

if (global.game_mode = 1) {
     global.centipede_regen = false;
     with (other) {instance_destroy();}
     instance_destroy();
     instance_create(x-4,y,player_die_obj);
     global.game_mode = 3;
     instance_create(other.x+other.explodex,other.y+other.explodey,explode_obj);
     snd_chance = round(ceil(random(2)));
     if (snd_chance = 1) then {sound_play(player_die_snd)};
     if (snd_chance = 2) then {sound_play(player_die2_snd)};
     global.ghgame = 0; //obsolete: grasshopper_obj.dead = 1;
     sound_stop(spider_snd); sound_stop(gecko_snd); sound_stop(flea_drop_snd);
     sound_stop(ship_fire_snd); sound_stop(background_bloop_snd);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="mushroom_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_outside_solid(direction+180,4)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.all_stop = true) {
     exit;
}

if mouse_check_button(mb_left) or keyboard_check(vk_space) {

     if global.game_mode = 1 {
          if instance_number(laser_obj) = 0 {
               if (sound_isplaying(ship_fire_snd)) {
                    sound_stop(ship_fire_snd);
               }
               sound_play(ship_fire_snd);
               instance_create(x,y-2,laser_obj)
          }
     }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
