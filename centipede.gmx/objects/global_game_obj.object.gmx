<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize Game Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//message boxes
global.level = 1;
script_execute(level_text_color_script);

//Stop All Audio When the Game Starts
sound_stop_all();

bob = 1; 

enum gameMode {
    demo = 0,
    game = 1,
    mush = 3,
    dead = 4,
    hiScore = 5
}

alarm[9] = 30;
alarm[6] = 30;

//Variables for Cheating Functionality
cheat = 0
global.cheating = 0
//Game Mode Variables
   global.ghgame = 0 //(May or may not add grasshopper game)
   global.all_stop = false //Game is not frozen
   global.game_over = 0 //This is not a Game Over
   global.game_mode = 0 //Game Mode starts in Demo Mode
   global.demo = true  //Demo Mode is currently happening
   global.players = 2 //player two mode may or may not be added
   global.player_current = 0 //no players currently playing at the moment
   pause = false

//Enemies Killed and other Variables
   global.bugs_killed = 0
   global.spiders_killed = 0
   global.spiders_killed2 = 0
   global.geckos_killed = 0
   die_counter = 0
   global.cent_justdied = 0
   spider_chance = 0 //If = 1 a spider will appear
   bug_drop = 0 //The higher the counter, the higher the chance a flea will spawn
   centipede_spawn = false //Centipede are currently not spawning
   cent_regen_counter = 0 //Centipede Regeneration counter is reset
   global.centipede_regen = false //Centipede Regeneration is not happening
   centipede_in = false //Centipede is currently not in the game play area
   gap = 0 //This is a step counter that measures how far apart to spawn individual
           //centipede to link them together into a chain
   gap_cap = 2 //Gap Counter Maximum for spawning centipedes
   bug_chance = 0//variable giving the bug a chance to fall
   cent_createx = 0
//powerups
   global.mushroom_hunter = 0;
   global.power_up_timer = 0
//Score, Lives, Levels
   score = 0 //Score is reset
   score_last = 0 //Detects if there is a change in the score
   global.score2 = 0 //(may or may not add 2player mode)
   global.spider_points = 0 //Points that are gained after you kill a spider
   points_trigger = 0 //Show points mode on (when you kill a spider)
   points_show = 0 //Show points after you kill a spider
   points_x = 0 //X location of where the points should be drawn
   points_y = 0 //Y location of where the points should be drawn
   lives = 0 //Lives are 0 in demo mode
   global.level = 1 //Level starts as 1
   global.extra_life_counter = 0 //Reset counter for extra lives (every 12000 points)
   even_or_odd_level = 0 //detects if even or odd level
   level_old = 0 //detects if there is a change in level

   //sound
   vol = 1
//Mushrooms Variables////////////////////////////////
   //Healing Mode
   shoot_mushrooms = 0 //counter for executing healing mushroom
   next_zone = 0 //a counter for mushroom healing after player dies
   p = 0 //counter for frequency mushroom healers fall after player dies
   healing = 0 //currently not healing mushrooms
   //Creation in the beginning of game
   m = 0
   mush_createx = 0 //beginning mushroom create coordinates
   mush_createy = 0

//High Score Input Variables; when global.game_mode = 5//////////////////////////////////////////////////////
  letter = 0 //the variable that describes your name numerically; gets translated into input_letter variable
  input_letter = 0 //this is the letter string that will input your name on high score
  cursor_location = 0 //place holder for high score input, it tells which letter you are on.
  a = 0 //timer for high score input. Changes the potential letters as you increase or decrease
  name = 0 //highscore input name
  pause = 0 //0:play, 1:pause. pause game variable
  input_mode = 1  //1:mouse, 2:keyboard. This is to control the high score input
  b = 0 //timer for detecting if the mouse has been active or not
  oldx = mouse_x //this helps tell if the mouse has been active
  oldy = mouse_y //the oldx and y variables will be compared to current x and y values.


//Create Grid Array for Collision Detection for Mushrooms
for (var i = 0; i &lt;= room_width div 8 + 4; i += 1)  {
    for (var j = 0; j &lt;= room_height div 8 + 4; j += 1) {
          cells[i,j] = 0;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Create Blocks, Mushrooms, Player</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Constants for Block Creation boundaries
rx = 238;
lx = -7;
uy = 192;
ly = 248;

//create block boundaries
for (var i = 0; i &lt;= 30; i++) {
    if (i &lt;= 7) {
            //create blocks on right boundary
        instance_create(rx, uy+(i*8), block_obj);
            //create blocks on left boundary
        instance_create(lx, uy+(i*8), block_obj);
    }
        //create blocks on upper boundary
    instance_create(0 + (i*8), uy, block_obj);
    instance_create(0 + (i*8), ly, block_obj);
}


//Create Side Walls
instance_create(-16,0,side_wall_obj);
instance_create(room_width-8,0,side_wall_obj);
//Create Ship
instance_create(120,240,ship_obj);

//CREATE ALL THE MUSHROOMS//////////////
  //Initiate X and Y Variables to speed up "for" loop
  var drawX;
  var drawY;
  //Somewhere between 40-50 iterations of creation
  for (i = 0; i &lt; ceil(round(random(10)))+40; i += 1) {
     ////sets the X and Y parameters randomly within room
     mush_createx = 8*ceil(round(random(30))); mush_createy = 8*ceil(round(random(28))+1)
     ////checks if there is a collision at the intended creation point, otherwise it will not create
     if (place_free(mush_createx,mush_createy))
     {
          instance_create(mush_createx,mush_createy,mushroom_obj);
     }
  }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[9] = 30; bob = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bob = 0; alarm[10] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ship_obj.invincible = false
global.mushroom_hunter = false
sound_play(power_down1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_volume(gecko_snd,1); sound_volume(cricket_snd,1);
   sound_volume(flea_drop_snd,1); sound_volume(ship_fire_snd,1);
   sound_volume(spider_snd,1); sound_volume(power_up1,1); sound_volume(background_bloop_snd,1);
   sound_volume(player_die_snd,1); sound_volume(player_die2_snd,1);
   sound_volume(enemy_die_snd,1);
   vol = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Begin Spawning Centipedes</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (centipede_spawn = false) {
centipede_spawn = true //begin spawning the centipedes!
cent_spawn_created = 0 //resets the number of centipede created to 0
cent_createx = 0
gap = 0 //step counter between individual centipede creation to form a chain

//Start Playing Pulse Sound if not in demo mode
if (global.demo = false) then {sound_stop(background_bloop_snd); sound_loop(background_bloop_snd);}

/////Distritues Centipede between connected and individual spawns/////////
   if global.level = 1 then connected_centipede = 12;
   if global.level = 2 then connected_centipede = 11;
   if global.level = 3 then connected_centipede = 11;
   if global.level = 4 then connected_centipede = 10;
   if global.level = 5 then connected_centipede = 10;
   if global.level = 6 then connected_centipede = 9;
   if global.level = 7 then connected_centipede = 9;
   if global.level = 8 then connected_centipede = 8;
   if global.level = 9 then connected_centipede = 8;
   if global.level = 10 then connected_centipede = 7;
   if global.level = 11 then connected_centipede = 7;
   if global.level = 12 then connected_centipede = 6;
   if global.level = 13 then connected_centipede = 6;
   if global.level = 14 then connected_centipede = 5;
   if global.level = 15 then connected_centipede = 5;
   if global.level = 16 then connected_centipede = 4;
   if global.level = 17 then connected_centipede = 4;
   if global.level = 18 then connected_centipede = 3;
   if global.level = 19 then connected_centipede = 3;
   if global.level = 20 then connected_centipede = 2;
   if global.level = 21 then connected_centipede = 2;
   if global.level &gt;= 22 then connected_centipede = 1;

   //This sets the number individual heads that will come out
   //Total centipedes will always = 12 so the remaining numbers will
   //be individual spawns
   other_centipede = 12 - connected_centipede;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Show score after killing spider</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>points_trigger = true //begins to show the score after killing spider
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spider_chance</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.game_over</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.game_mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>4</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Execute Healing Mushrooms</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shoot_mushrooms = 1 //variable to execute healing mushrooms (not shooting them)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Stop Showing Spider Points</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>points_show = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Detect if the mouse position has changed to determine the input mode to mouse (2)
//This is used for global.game_mode = 5 when you are inputting your high score
if (mouse_x &lt;&gt; oldx) or (mouse_y &lt;&gt; oldy) then input_mode = 2


b+=1 //counter

if (b &gt;= 5) { //once it hits 60 aka. 2 seconds
     oldx = mouse_x  //update old data to current
     oldy = mouse_y
     b = 0 //reset counter
}

/////////RESET THE ARRAY EVERY END STEP///////////////////
//This is to see if objects have moved to new locations
//such as the centipede

var i, j; //initialize variables
//Set all grid areas to 0 thus resetting locations to
//be recalculated at the beginning of the next step
for (i = 0; i &lt;= room_width div 8 + 4; i += 1)
{
    for (j = 0; j &lt;= room_height div 8 + 4; j += 1)
    {
     cells[i,j] = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with (centipede_obj) {global_game_obj.cells[abs(x) div 8, abs(y) div 8] = 2;}
with (mushroom_obj) {global_game_obj.cells[abs(x) div 8, abs(y) div 8] = 1;}
with (temp_mushroom_obj) {global_game_obj.cells[abs(x) div 8, abs(y) div 8] = 1;}
with (invis_mushroom_obj) {global_game_obj.cells[abs(x) div 8, abs(y) div 8] = 1;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Game Modes</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global variable game_mode
//0 is pre-game, showing high score, and using an AI to control the ship
//1 is the 1 player game mode
//2 is the 2nd players turn
//3 is the time mushrooms are recovered
//4 brings back the destroyed ship
//5 is high score addition and return to the title screen seen in DRAW EVENT

if (global.game_mode = gameMode.demo) { //Mode 0
    //Stop bloop sound
 if (sound_isplaying(background_bloop_snd)) then {sound_stop(background_bloop_snd);}
 if (!instance_exists(invis_mushroom_obj))  { //&lt;&lt;make sure this is here to insure only 1 creation
   ////CREATE ALL OF THE INVISIBLE BLOCKS BEHIND THE DEMO MODE TEXT/////////////////////////////
    instance_create(10*8,3*8,invis_mushroom_obj); instance_create(11*8,3*8,invis_mushroom_obj);
   instance_create(12*8,3*8,invis_mushroom_obj); instance_create(13*8,3*8,invis_mushroom_obj);
   instance_create(14*8,3*8,invis_mushroom_obj); instance_create(15*8,3*8,invis_mushroom_obj);
   instance_create(16*8,3*8,invis_mushroom_obj); instance_create(17*8,3*8,invis_mushroom_obj);
   instance_create(18*8,3*8,invis_mushroom_obj); instance_create(19*8,3*8,invis_mushroom_obj);
   instance_create(20*8,3*8,invis_mushroom_obj);
    instance_create(11*8,4*8,invis_mushroom_obj); instance_create(12*8,4*8,invis_mushroom_obj);
   instance_create(13*8,4*8,invis_mushroom_obj); instance_create(14*8,4*8,invis_mushroom_obj);
   instance_create(15*8,4*8,invis_mushroom_obj); instance_create(16*8,4*8,invis_mushroom_obj);
   instance_create(17*8,4*8,invis_mushroom_obj); instance_create(18*8,4*8,invis_mushroom_obj);
   instance_create(19*8,4*8,invis_mushroom_obj);
    instance_create(11*8,5*8,invis_mushroom_obj); instance_create(12*8,5*8,invis_mushroom_obj);
   instance_create(13*8,5*8,invis_mushroom_obj); instance_create(14*8,5*8,invis_mushroom_obj);
   instance_create(15*8,5*8,invis_mushroom_obj); instance_create(16*8,5*8,invis_mushroom_obj);
   instance_create(17*8,5*8,invis_mushroom_obj); instance_create(18*8,5*8,invis_mushroom_obj);
   instance_create(19*8,5*8,invis_mushroom_obj);
    instance_create(11*8,6*8,invis_mushroom_obj); instance_create(12*8,6*8,invis_mushroom_obj);
   instance_create(13*8,6*8,invis_mushroom_obj); instance_create(14*8,6*8,invis_mushroom_obj);
   instance_create(15*8,6*8,invis_mushroom_obj); instance_create(16*8,6*8,invis_mushroom_obj);
   instance_create(17*8,6*8,invis_mushroom_obj); instance_create(18*8,6*8,invis_mushroom_obj);
   instance_create(19*8,6*8,invis_mushroom_obj);
    instance_create(11*8,7*8,invis_mushroom_obj); instance_create(12*8,7*8,invis_mushroom_obj);
   instance_create(13*8,7*8,invis_mushroom_obj); instance_create(14*8,7*8,invis_mushroom_obj);
   instance_create(15*8,7*8,invis_mushroom_obj); instance_create(16*8,7*8,invis_mushroom_obj);
   instance_create(17*8,7*8,invis_mushroom_obj); instance_create(18*8,7*8,invis_mushroom_obj);
   instance_create(19*8,7*8,invis_mushroom_obj);
    instance_create(11*8,8*8,invis_mushroom_obj); instance_create(12*8,8*8,invis_mushroom_obj);
   instance_create(13*8,8*8,invis_mushroom_obj); instance_create(14*8,8*8,invis_mushroom_obj);
   instance_create(15*8,8*8,invis_mushroom_obj); instance_create(16*8,8*8,invis_mushroom_obj);
   instance_create(17*8,8*8,invis_mushroom_obj); instance_create(18*8,8*8,invis_mushroom_obj);
   instance_create(19*8,8*8,invis_mushroom_obj);
    instance_create(11*8,9*8,invis_mushroom_obj); instance_create(12*8,9*8,invis_mushroom_obj);
   instance_create(13*8,9*8,invis_mushroom_obj); instance_create(14*8,9*8,invis_mushroom_obj);
   instance_create(15*8,9*8,invis_mushroom_obj); instance_create(16*8,9*8,invis_mushroom_obj);
   instance_create(17*8,9*8,invis_mushroom_obj); instance_create(18*8,9*8,invis_mushroom_obj);
   instance_create(19*8,9*8,invis_mushroom_obj);
    instance_create(11*8,10*8,invis_mushroom_obj); instance_create(12*8,10*8,invis_mushroom_obj);
   instance_create(13*8,10*8,invis_mushroom_obj); instance_create(14*8,10*8,invis_mushroom_obj);
   instance_create(15*8,10*8,invis_mushroom_obj); instance_create(16*8,10*8,invis_mushroom_obj);
   instance_create(17*8,10*8,invis_mushroom_obj); instance_create(18*8,10*8,invis_mushroom_obj);
   instance_create(19*8,10*8,invis_mushroom_obj);
    instance_create(11*8,11*8,invis_mushroom_obj); instance_create(12*8,11*8,invis_mushroom_obj);
   instance_create(13*8,11*8,invis_mushroom_obj); instance_create(14*8,11*8,invis_mushroom_obj);
   instance_create(15*8,11*8,invis_mushroom_obj); instance_create(16*8,11*8,invis_mushroom_obj);
   instance_create(17*8,11*8,invis_mushroom_obj); instance_create(18*8,11*8,invis_mushroom_obj);
   instance_create(19*8,11*8,invis_mushroom_obj);
    instance_create(10*8,14*8,invis_mushroom_obj); instance_create(11*8,14*8,invis_mushroom_obj);
   instance_create(12*8,14*8,invis_mushroom_obj); instance_create(13*8,14*8,invis_mushroom_obj);
   instance_create(14*8,14*8,invis_mushroom_obj); instance_create(15*8,14*8,invis_mushroom_obj);
   instance_create(16*8,14*8,invis_mushroom_obj); instance_create(17*8,14*8,invis_mushroom_obj);
   instance_create(18*8,14*8,invis_mushroom_obj);
    instance_create(7*8,15*8,invis_mushroom_obj); instance_create(8*8,15*8,invis_mushroom_obj);
   instance_create(9*8,15*8,invis_mushroom_obj); instance_create(10*8,15*8,invis_mushroom_obj);
   instance_create(11*8,15*8,invis_mushroom_obj); instance_create(12*8,15*8,invis_mushroom_obj);
   instance_create(13*8,15*8,invis_mushroom_obj); instance_create(14*8,15*8,invis_mushroom_obj);
   instance_create(15*8,15*8,invis_mushroom_obj); instance_create(16*8,15*8,invis_mushroom_obj);
   instance_create(17*8,15*8,invis_mushroom_obj); instance_create(18*8,15*8,invis_mushroom_obj);
   instance_create(19*8,15*8,invis_mushroom_obj); instance_create(20*8,15*8,invis_mushroom_obj);
   instance_create(21*8,15*8,invis_mushroom_obj); instance_create(22*8,15*8,invis_mushroom_obj);
   instance_create(23*8,15*8,invis_mushroom_obj);
   }
/*
   if cheat = 0 then {if keyboard_check_pressed(ord("C")) then {cheat = 1;}}
   if cheat = 1 then {if keyboard_check_pressed(ord("H")) then {cheat = 2;}}
   if cheat = 2 then {if keyboard_check_pressed(ord("E")) then {cheat = 3;}}
   if cheat = 3 then {if keyboard_check_pressed(ord("A")) then {cheat = 4;}}
   if cheat = 4 then {if keyboard_check_pressed(ord("T")) then {cheat = 5;}}
   if cheat = 5 {
        screen_redraw();
        screen_redraw();
        if show_question("Do you want to cheat?") = true {
             cheat = 0; if global.cheating = false then {sound_play(power_up1); global.cheating = true;}
        } else {
             cheat = 0; if global.cheating = true then {sound_play(power_down1); global.cheating = false;} else sound_play(power_down1)
        }
   }

*/
}



///////////////////////////////////////////////////////////////////////////////////////////////
/////GLOBAL GAME MODE 1: GAME PLAY MODE////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

if (global.game_mode = gameMode.game) { //Mode 1
  //When the Game Starts, destroy all invisible blocks that back the text
  if (instance_exists(invis_mushroom_obj)) {
       with (invis_mushroom_obj) instance_destroy();
  }

  //(Grasshopper Game May or may not be added)
  if (global.ghgame = 0) or (global.ghgame = 5) {
      if global.demo = false {
           if (instance_exists(centipede_obj)) {
                if !sound_isplaying(background_bloop_snd) {
                     sound_loop(background_bloop_snd);
              }
         }
      }
      if (global.ghgame = 1) {
          sound_stop(background_bloop_snd);
         }

      }

}


///////////////////////////////////////////////////////////////////////////////
//////GAME MODE 3: MUSHROOM REPARATIONS////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

if (global.game_mode = gameMode.mush) { //Mode 3
   //Resetting Important Game Variables
   centipede_in = false //Centipede is not on the playing field
   cent_regen_counter = 0 //Centipede Regeneration counter is reset
   cent_spawn_created = 0 //Centipede are currently not being spawned
   centipede_spawn = 0
   global.mushroom_hunter = 0
   global.centipede_regen = false //Centipede are not being regenerated
   if healing = 0 {healing = 1; alarm[1]=35} //Start healing in about a second
   if global.demo = false then sound_stop(background_bloop_snd); //If it is the demo stop the sound
   global.all_stop = true; //freeze all movement

//An Object-Oriented way of Repairing the Mushrooms
 if (instance_exists(mushroom_healer_shooter)) {
    if (shoot_mushrooms = 1) { //one time event trigger variable
        shoot_mushrooms = 0    //
        //Replace mushroom_healer_shooter with a mushroom_indicator_obj which then heals given row
        instance_create(instance_nearest(x,y,mushroom_healer_shooter).x,
        instance_nearest(x,y,mushroom_healer_shooter).y,mushroom_indicator_obj)
        with (instance_nearest(x,y,mushroom_healer_shooter)) {
              instance_destroy();
        }
    }
 } else {
    if (shoot_mushrooms = 1) {
           shoot_mushrooms = 0;
           alarm[2] = 10;
    }
}


}


/////////////////////////////////////////////////////////////////////
//////GAME MODE 4: LOSE LIFE, REPLACE SHIP, RESUME PLAY//////////////
/////////////////////////////////////////////////////////////////////

if (global.game_mode = gameMode.dead) { //Mode4

  //////healing variables makes these actions a ONE STEP-ONE TIME EVENT///////////////////
  if healing = 1 {

       script_execute(destroy_enemies_script); //Destroy All Enemies
       healing = 0 //Keep this script from repeating itself
       alarm[6] = 30 //respawn the centipede in 1 second
       centipede_in = false //centipede is not in the game yet



       if (lives &gt;= 2) &amp;&amp; (global.demo = false) {
                 global.all_stop = false; //unfreeze movement
                 if (not instance_exists(ship_obj)) { //Makes sure ship does not exist
                        instance_create(120,240,ship_obj); //to avoid 2 ship_obj"s
                        global.game_mode = 1; lives -= 1;
                 }
       } else if (lives &gt;= 1) {
                 sound_stop(background_bloop_snd);//stops background blooping sound
                 global.game_mode = gameMode.hiScore; lives -= 1;
                 cursor_location = 0; //this is the position of cursor when entering high score
                 letter = 0; //This letter is the one that will indicate which letter"you are on"
                 confirmed_letter[0] = " "; //Initializes the letters for
                 confirmed_letter[1] = " "; //entering High Score
                 confirmed_letter [2] = " ";
       }



       //IF IN DEMO MODE (Lives do not matter here)
       if (global.demo) = true {
             global.all_stop = false; //Unfreeze the Game
             global.game_mode = 0; //Keep Game in Demo Mode
             //Double checks ships existence to avoid creating 2 ships
             if (not instance_exists(ship_obj)) {
                   instance_create(120,240,ship_obj); //Create Ship
             }
       }


  }//if (healing = 1) end

}//if (global.game_mode = 4) end


///////////////////////////////////////////////////////////////////////
///////////Go to DRAW EVENT for Highscore MODE ////////////////////////
///////////////////////////////////////////////////////////////////////
//VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Enemy Spawn</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/////////////////////////////////////////////////////////////////////////////
///////CHANGING ENEMY VARIABLES//////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
//If the Gecko Variable increases, chances of geckos appearing increases
gecko = 390-global.level*30
if gecko &lt; 150 then gecko = 150

//If the Spider Variable increases, chances of spiders appearing increases
//The Spider variable is determined by level and a small element of randomness
spider = global.level*15 + -15 + round(ceil(random(30))); if spider &gt;= 90 spider = 90;

if global.level = 2 then bug_cap = 9
if global.level = 3 then bug_cap = 8
if global.level = 4 then bug_cap = 8
if global.level = 4 then bug_cap = 7
if global.level = 5 then bug_cap = 7
if global.level &gt;= 6 then bug_cap = 7

/////////////////////////////////////////////////////////////////////////////
///////SPAWN THE ENEMIES/////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
if global.game_mode = 1 or global.game_mode = 0
{
////////////////
//FLEAS!!//////
///////////////
if global.level &gt; 1
{
 if (bug_drop &gt;= bug_cap - 1) then {bug_drop = bug_cap - 1}; if (bug_drop &lt;= 0) then {bug_drop = 0};
 if (bug_chance = true)
  {
   bug_release = round(ceil(random(bug_cap-bug_drop)));
   if (bug_release = 1)
    {
     bugx = round(random(232/8))*8;
     bugy = 8;
     instance_create(bugx,bugy,bug_obj);
     bug_drop = 0
    }
   bug_chance = false;
   bug_release = 0
  }

}

//gecko/scorpions
if global.level &gt; 3
{
gecko_chance = ceil(round(random(gecko))); //the chance of geckos appearing
gecko_hsnap = round(random(20)+1); //variable for height
gecko_side = round(ceil(random(2)));
if gecko_side = 1 then gecko_px = room_width;
if gecko_side = 2 then gecko_px = -16;
gecko_py = gecko_hsnap*8
if gecko_chance = 1 &amp;&amp; instance_number(gecko_obj) = 0
{
instance_create(gecko_px,gecko_py,gecko_obj)
}
}

if !instance_exists(spider_obj)
 {
  spider_chance = round(ceil(random(30*4-spider)))
  spider_side = round(ceil(random(2)));
  if spider_side = 1 then spider_px = room_width+8;
  if spider_side = 2 then spider_px = -8;
  if spider_chance = 1 then instance_create(spider_px,152,spider_obj);
 }

 if global.centipede_regen = 1
{
 cent_regen_counter += 1
 cent_regen_cap = 120
 if cent_regen_counter &gt;= cent_regen_cap
  {
   cent_regen_counter = 0;
   cent_side = round(ceil(random(2)))
   if cent_side = 1 then cent_px = room_width
   if cent_side = 2 then cent_px = -4
   instance_create(cent_px,192,centipede_obj)
   if cent_regen_cap &gt; 30 then  cent_regen_cap -= 20 else cent_regen_cap = 30;
  }
}

if !instance_exists(centipede_obj) &amp;&amp; centipede_in = true
 {
  global.level += 1
  sound_stop(background_bloop_snd)
  centipede_spawn_created = 0
  cent_regen_counter = 0
  alarm[6] = 30
  centipede_in = false
  global.centipede_regen = false
 }


 if global.level &gt; level_old then even_or_odd_level += global.level - level_old;
 level_old = global.level
 if even_or_odd_level &gt;= 3 then even_or_odd_level = 1
 if even_or_odd_level = 1 then gap_cap = 2
 if even_or_odd_level = 2 then gap_cap = 4

 if centipede_spawn = true
  {


   gap += 1

   if gap &gt;= gap_cap &amp;&amp; cent_spawn_created &lt; connected_centipede
    {
    gap = 0
    cent_spawn_created += 1
    instance_create(120,0,centipede_obj)
     centipede_in = true
     var cent_createx;
     cent_createx = 0
    if other_centipede &gt; 0 {
         if (cent_spawn_created = 1) {
              for (i = 0; i &lt; other_centipede; i += 1) {
                   if (even_or_odd_level = 1) {
                        instance_create(cent_createx,0,centipede_obj);
                   }
                   if (even_or_odd_level = 2) {
                        instance_create(232-cent_createx,0,centipede_obj);
                   }
              cent_createx += 16
              }
         }
    }

    }
    if cent_spawn_created &gt;= connected_centipede
     {
     centipede_spawn = false
     cent_createx = 0
     }

   }




}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start game</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////////PRESS SPACE TO START THE GAME/////////////////////////////

if (keyboard_check_pressed(vk_space)) &amp;&amp; (global.demo = true) &amp;&amp;
!instance_exists(cheat_info_obj) {

///SET GAME VARIABLES//////////////////////////////////////////
  //Game Mode
  global.demo = false //No longer the demo
  global.game_mode = 1 //Game play mode set
  global.players = 1 //One player mode
  global.all_stop = false  //Will double-check that the game is not left frozen

  //Ship variables established in ship
  ship_obj.move_counter = 0
  ship_obj.move_type = 1

  //Score, Lives, Level
  score = 0 //player 1 score reset
  global.score2 = 0 //player 2 score reset (might add 2 player mode later)
  global.extra_life_counter = 0 //Keeps track of points towards extra lives
  lives = 3 //lives set to 3
  global.level = 1 //Level 1 Set
  even_or_odd_level = 0 //Keeps track of even and odd levels
  level_old = 0 //Detects if level has changed

  //powerups
  global.mushroom_hunter = 0;
  ship_obj.invincible = false
  //Enemies Killed and other Variables
  global.spiders_killed = 0
  global.geckos_killed = 0
  global.bugs_killed = 0
  global.spider_points = 0
  bug_drop = 0
  cent_createx = 0


///////CREATION AND DESTRUCTION////////////////////////////////////
  //DESTROY ALL necessary OBJECTS as described in script
  script_execute(destroy_script);
  //Centipede Creation Variables
  global.centipede_regen = false //Centipedes do not regenerate
  cent_regen_counter = 0 //Centipede regeneration timer reset
  centipede_spawn = false //Do not spawn Centipedes yet
  centipede_in = false //Centipedes do not exist in play area
  alarm[6] = 30 //Centipedes will begin to spawn in 1 second

  //Create the Ship at the middle-bottom of screen
  instance_create(120,240,ship_obj)

  ////////CREATE ALL THE MUSHROOMS//////////////
  //Initiate X and Y Variables to speed up"for" loop
  var drawX;
  var drawY;
  //Somewhere between 40-50 iterations of creation
  for (i = 0; i &lt; ceil(round(random(10)))+40; i += 1) {
     ////sets the X and Y parameters randomly within room
     mush_createx = 8*ceil(round(random(30))); mush_createy = 8*ceil(round(random(28))+1)
     ////checks if there is a collision at the intended creation point, otherwise it will not create
     if !collision_point(mush_createx,mush_createy,mushroom_obj,true,true) {
          instance_create(mush_createx,mush_createy,mushroom_obj);
     }
  }



}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>all times</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///////EARN EXTRA LIFE////////////////////////////////////////////////////
//Detects of score has changed and adds it to the extra life counter
if (score_last &lt; score) {
  global.extra_life_counter += (score-score_last)
}
score_last = score
//Add an extra life every 12000 points you earn
if (global.extra_life_counter &gt;= 12000) {
  if (global.demo = false) then {sound_play(extra_life_snd)} //plays the sound
  global.extra_life_counter = global.extra_life_counter - 12000 //resets the counter
  lives += 1 //increase lives by 1
}

/////RESET LEVELS after beating last level///////////////////////////////
if (global.level &gt;= 15) {
   global.level = 1
}

//sound volume determined by vol
sound_volume(gecko_snd,vol); sound_volume(cricket_snd,vol);
   sound_volume(flea_drop_snd,vol); sound_volume(ship_fire_snd,vol);
   sound_volume(spider_snd,vol); sound_volume(power_up1,vol);
   sound_volume(background_bloop_snd,vol);
   sound_volume(player_die_snd,vol); sound_volume(player_die2_snd,vol);
   sound_volume(enemy_die_snd,vol);

if global.cent_justdied = 1 {
     die_counter += 1
     if die_counter &gt;= 5 {
          die_counter = 0
          global.cent_justdied = 0
     }
}

if global.power_up_timer &gt; 0 then global.power_up_timer -= 1;


if sound_isplaying(gecko_snd) then sound_volume(background_bloop_snd,0)
else sound_volume(background_bloop_snd,1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Obsolete
if global.game_mode = 0
{
screen_redraw();
if show_question("Do you want to erase high scores?") = false then exit;
highscore_clear();
highscore_add("DFT",15432); highscore_add("CAD",14320); highscore_add("EJD",16543)
highscore_add("DCB",13210); highscore_add("ED",13010); highscore_add("DEW",12805)
highscore_add("DFW",12201); highscore_add("GJR",12102)
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.game_mode =[ ]</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This code draws everything needed during different game modes
//TABLE OF CONTENTS
//I. Sets Font and Color Constants (All Times)
//II. Draw At All Times (All Times)
//   a. Score
//   1. 1 Player Mode Score Display Settings (shows all times anyway)
//   2. 2 Player Mode Score Display Settings
//III. Drawings During Demo Play (global.game_mode = 0)
//   a. Draw Hi-Scores: Values
//   b. Draw Hi-Scores: Names
//   c. Draw Atari Copyright
//   d. Draw Other Text
//IV. Input Hi-Score End-Game (global.game_mode = 5)
//   a.
//   b. Index for the Alphabet
//   c. Controls for Inputting Hi-Score
//      1. Keyboard Control Input
//      2. Mouse Control Input
//   d. Input Initials
//   e. Submit Initials / Return to Demo Play


/////////////////////////////////////////////////
//I. (All Times)///
////////////////////////////////////////////////
draw_set_alpha(1)
//Draw laser on the Ship if Ship exists, and if there are no lasers present
if (instance_exists(ship_obj)) &amp;&amp; instance_number(laser_obj) = 0 {
     if global.mushroom_hunter = false {
          draw_sprite(laser_wait_spr,global.level - 1,ship_obj.x,ship_obj.y - 2)
     } else {
          draw_sprite(laser_wait_spr,-1,ship_obj.x,ship_obj.y - 2)
     }
}
if global.demo = true
{
 draw_set_halign(fa_right)
 if global.cheating = true then {draw_text (room_width-8,248,"PRESS F1 FOR INFO")}
}



draw_set_halign(fa_left)
if global.cheating = true then {draw_text (2,248,"CHEAT MODE")}



/////////////////////////////////////////////////
//II. Draw Score and High Score (All Times)/////
////////////////////////////////////////////////

   //a. Draw Score and High Score
      //1. 1 Player Mode Score Display Settings (shows at all times anyway)

      script_execute(level_text_color_script)
      draw_set_halign(fa_right); //Aligned text on right side.

      if (score &lt; 10) then {draw_text(40,.5,0)}; //Add extra zero in 10"s place

      if (score &gt;= highscore_value(1)) { //If player 1 has hi-score,
           highest_score = score //then get value from player 1 score,
      } else {
           highest_score = highscore_value(1); //or not, get value from hi-score
      }

      draw_text(48,.5,score); //Draw player 1 score in upper-left
      draw_text(18*8,.5,highest_score); //Draw highest score in center-top

      //2. 2 Player Mode Score Display Settings///////////
      if (global.players = 2) {  //Only draw during player 2 mode.
            if (global.score2 &gt;= highscore_value(1)) { //If player 2 has hi score
                 highest_score = global.score2;//then draw  p2  ashighest_score
            }
            draw_text(240,.5,global.score2); //Draw player 2 score in top right.
            if (global.score2 &lt; 10) then {draw_text(232,.5,0)}; //Draws "0"'
      }

   //b. Draw Lives
   lives_draw = lives - 1;
   lives_draw1 = lives - 1;
   lives_draw2 = lives - 1;
   //Limit Each lives_draw variable according to limit
   if (lives_draw &gt;= 5) then {lives_draw = 5};
   if (lives_draw1 &gt;= 10) then {lives_draw1 = 10};
   if (lives_draw2 &gt;= 15) then {lives_draw2 = 15};

   //Initiate Variables for the "for" loops
   var drawX, var drawY, var drawX1, var drawY1, var drawX2, var drawY2;
   drawX = 48; drawY = 0; drawX1 = 48; drawY1 = 0; drawX2 = 48; drawY2 = 0;
   //Draw sprites as many lives you have minus 1, because your ship counts as 1.
   //If you have more than 5 lives, it will begin to change color, +1 level
   for (i = 0; i &lt; lives_draw; i += 1) {
    draw_sprite(ship_spr,global.level-1,drawX,drawY); drawX += 9;
   }
   for (i1 = 0; i1 &lt; lives_draw1-5; i1 += 1) {
    draw_sprite(ship_spr,global.level,drawX1,drawY1); drawX1 += 9;
   }
    for (i2 = 0; i2 &lt; lives_draw2-10; i2 += 1) {
    draw_sprite(ship_spr,global.level+1,drawX2,drawY2); drawX2 += 9;
   }

   //c. Draw Mouse Sprite
   //Draw Mouse sprite if Ship exists and is not on mouse coordinates
  if !(global.demo = true) {
        if instance_exists(ship_obj) {
          if ship_obj.mouse_dist &gt; 4 {
             if (instance_exists(ship_obj)) {
                  if (ship_obj.x != mouse_x) or (ship_obj.y != mouse_y) {
                       draw_sprite_ext(mouse_spr,0,mouse_x,mouse_y,1,1,0,c_blue,.6);
                  } else {
                       draw_sprite_ext(mouse_spr,0,mouse_x,mouse_y,1,1,0,c_blue,.6);
                  }
             }


          }
       }
  }
  if (global.game_mode = 5) &amp;&amp; (score &gt; highscore_value(8)) {
  draw_sprite_ext(mouse_spr,0,mouse_x,mouse_y,1,1,0,c_blue,.6);
  }
//if the ship does not exists, the mouse is drawn anyway

/////////////////////////////////////////////////////
//III. Drawings During Demo Play (global.game_mode = 0)
//////Hi-Score, Logo, Other Text////////////////////
if (global.game_mode = 0) or (global.demo = true)  {
  draw_set_color(c_black);
  if bob = 1 {draw_rectangle(8*6,8*19,8*26,8*20,false)}
  script_execute(level_text_color_script);
   //a. Draw Hi-Scores: Values
 draw_set_halign(fa_right);
 draw_text(21*8,8*3,"HIGH SCORES");
 draw_text(16*8,8*4,highscore_value(1));
 draw_text(16*8,8*5,highscore_value(2));
 draw_text(16*8,8*6,highscore_value(3));
 draw_text(16*8,8*7,highscore_value(4));
 draw_text(16*8,8*8,highscore_value(5));
 draw_text(16*8,8*9,highscore_value(6));
 draw_text(16*8,8*10,highscore_value(7));
 draw_text(16*8,8*11,highscore_value(8));
    //b. Draw Hi-Scores: Names
 draw_set_halign(fa_left);
 draw_text(17*8,8*4,highscore_name(1));
 draw_text(17*8,8*5,highscore_name(2));
 draw_text(17*8,8*6,highscore_name(3));
 draw_text(17*8,8*7,highscore_name(4));
 draw_text(17*8,8*8,highscore_name(5));
 draw_text(17*8,8*9,highscore_name(6));
 draw_text(17*8,8*10,highscore_name(7));
 draw_text(17*8,8*11,highscore_name(8));
    //c. Draw Atari Copyright
 if global.cheating = false {
 draw_text(8*10,8*31," 1980 ATARI")
 draw_sprite(copyright_spr,global.level-1,8*10,8*31);
 }
    //d. Draw Other Text
 draw_text(8*10,8*14,"CREDITS 2");
 draw_text(8*7,8*15,"BONUS EVERY 12000");
 if bob = 1 {draw_text(8*6,8*19,"PRESS SPACE TO START")}
  //Draws Game Over if Player just got a Game Over
  if (global.game_over) = 1 {
   draw_set_color(c_black)
   draw_rectangle(8*11,8*17,8*20,8*18,false)
   script_execute(level_text_color_script)
   draw_text(8*11,8*17,"GAME OVER");
  }


}


if (global.game_mode = 1) {
//PAUSE////////////////////////////////////////////////////
 if (pause = true) {
   vol = 0
   sound_volume(gecko_snd,vol); sound_volume(cricket_snd,vol);
   sound_volume(flea_drop_snd,vol); sound_volume(ship_fire_snd,vol);
   sound_volume(spider_snd,vol); sound_volume(power_up1,vol);
   sound_volume(background_bloop_snd,vol);
   sound_volume(player_die_snd,vol); sound_volume(player_die2_snd,vol);
   sound_volume(enemy_die_snd,vol); alarm[7] = 60;

   draw_set_alpha(.25);
   draw_set_color(c_black)
   draw_rectangle(0,0,room_width,room_height,false)
   draw_set_alpha(1);
   draw_set_halign(fa_left)
   draw_set_color(c_black);
   draw_rectangle(13*8,15*8,18*8,16*8,false);
   script_execute(level_text_color_script);
   draw_text(13*8,15*8,"PAUSE")
  } else {
   if (vol &lt; 1) then {vol += .033}; if (vol &gt;= 1) then {vol = 1};
  }
  if global.cheating = false{
  draw_set_halign(fa_left)
  script_execute(level_text_color_script);
  if ship_obj.invincible = true then draw_text(2,248,"INVINCIBLE" + " " + string(global.power_up_timer div 30));
  if global.mushroom_hunter = true then draw_text(2,248,"MUSHROOM HUNTER" + " " + string(global.power_up_timer div 30));
  }


}

///////////////////////////////////////////////////////////
//IV. Input Hi-Score End-Game (global.game_mode = 5)///////
///////////////////////////////////////////////////////////

if (global.game_mode = 5) {

//If your score makes the hi-score board
if (score &gt; highscore_value(8)) &amp;&amp; global.cheating = true {sound_play(nope_snd); }
if (score &gt; highscore_value(8)) &amp;&amp; global.cheating = false {
    draw_set_alpha(.25);
    draw_set_color(c_black)
    draw_rectangle(0,0,room_width,room_height,false)
    draw_set_alpha(1);
    draw_rectangle(8*11,8*14,8*20,8*15,false); //for "Credits 2"
    draw_rectangle(8*12,8*17,8*21,8*18,false); //for "Game Over"
    draw_rectangle(8*10,8*20,8*21,8*21,false); //for "Great Score"
    draw_rectangle(8*6,8*21,8*25,8*22,false); //for "Enter Your Initials"
    draw_rectangle(8*13,8*23,8*16,8*24,false); //for "Initials"
    script_execute(level_text_color_script);
    //a. Draw Texts
    draw_set_halign(fa_left); //Set text alignment to the left.
    draw_text(8*11,8*14,"CREDITS 2");//Other text.
    draw_text(8*12,8*17,"GAME OVER");
    draw_text(8*10,8*20,"GREAT SCORE");
    draw_text(8*6,8*21,"ENTER YOUR INITIALS");
    draw_text(8*13,8*23,string(string(confirmed_letter[0])+ //Draw inputted letters
    string(confirmed_letter[1])+string(confirmed_letter[2])));
    draw_text(cursor_location*8 + 13*8,8*23,string(input_letter));//Draw current potential letter

   //b. Index for the Alphabet
   if letter = -1 then input_letter = " ";
   if letter = 0 then input_letter = string("A"); if letter = 1 then input_letter = string("B");
   if letter = 2 then input_letter = string("C"); if letter = 3 then input_letter = string("D");
   if letter = 4 then input_letter = string("E"); if letter = 5 then input_letter = string("F");
   if letter = 6 then input_letter = string("G"); if letter = 7 then input_letter = string("H");
   if letter = 8 then input_letter = string("I"); if letter = 9 then input_letter = string("J");
   if letter = 10 then input_letter = string("K"); if letter = 11 then input_letter = string("L");
   if letter = 12 then input_letter = string("M"); if letter = 13 then input_letter = string("N");
   if letter = 14 then input_letter = string("O"); if letter = 15 then input_letter = string("P");
   if letter = 16 then input_letter = string("Q"); if letter = 17 then input_letter = string("R");
   if letter = 18 then input_letter = string("S"); if letter = 19 then input_letter = string("T");
   if letter = 20 then input_letter = string("U"); if letter = 21 then input_letter = string("V");
   if letter = 22 then input_letter = string("W"); if letter = 23 then input_letter = string("X");
   if letter = 24 then input_letter = string("Y"); if letter = 25 then input_letter = string("Z");
   if letter = 26 then input_letter = " ";

   //c. Controls for Inputting Initials
   if (letter &lt; 0) then {letter = -1}; if (letter &gt; 25) then {letter = 26}; //Keeps letters in boundaries

      //1. Keyboard Control Input
      if (keyboard_check(vk_left)) or (keyboard_check(vk_down)) {  //Gradual letter change by
            input_mode = 1; a+=b/10+2; b+=1; if (b &gt;= 60) then {b = 60}; //using counters a, b
      }
      if (keyboard_check(vk_right)) or (keyboard_check(vk_up)) {
            input_mode = 1; a+=b/10+2;b+=1; if (b &gt;=60) then {b = 60}
      }
      if (keyboard_check_released(vk_left)) or (keyboard_check_released(vk_right)) or  //Key release will
         (keyboard_check_released(vk_up)) or (keyboard_check_released(vk_down)) then {b = 0; a = 0;} //reset counters.

      if (a &gt;= 20) { //Once timer is reached, check which way to add or subtract.
           a = 0; //reset timer
         if (keyboard_check(vk_left)) or (keyboard_check(vk_down)) then {letter -= 1}; //Execute change letter down
         if (keyboard_check(vk_right)) or (keyboard_check(vk_up)) then {letter += 1}; //Execute change letter up
      }

      //2. Mouse Control Input
      if (input_mode = 2) {
         dest_letter = mouse_x div (room_width div 27)
         dist_letter = abs(dest_letter - letter)
         a += dist_letter*2; //formula to set counter
         if (a &gt;= 20) {
              a = 0; //reset counter
              if letter &gt; dest_letter { //if mouse is to the left
                   letter -= 1   //decrease a letter
              } else {
              if letter &lt; dest_letter { //if mouse is to the right
                   letter += 1;  //increase letter
              }
              }
        }
      }

   //d. Input Initials
   if (cursor_location &lt;= 2) { //Make sure you are not done adding letters.
    //Enter, space, left mouse button will enter the letter.
        if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(vk_space)
           or mouse_check_button_pressed(mb_left) {
                confirmed_letter[cursor_location] = string(input_letter) //Stores the letter.
                cursor_location += 1 //Moves cursor one space right.
        }
   }


   //e. Submit Initials
      if cursor_location &gt;= 3 {
          name = string(string(confirmed_letter[0]) + //Get string player just inputted
          string(confirmed_letter[1]) + string(confirmed_letter[2]))
          highscore_add(string(name),score) //Add the new hi-score using name string
          global.game_mode = 0; instance_create(120,240,ship_obj);
          global.all_stop = 0; global.game_over = 1; alarm[3] = 30*5; centipede_spawn = false
          global.demo = true; global.cheating = false; global.mushroom_hunter = false;
          alarm[9] = 1; bob = 1;  exit; //Return back to pre-game state; exit event.
      }

} else {
    global.mushroom_hunter = 0
    global.game_mode = 0; //Back to Demo Mode
    global.demo = true;
    global.cheating = false
    instance_create(120,240,ship_obj); //Recreate Ship for Demo Mode
    global.game_over = 1; //Game Over has Occurred, this alerts program to draw Game Over text
    alarm[3] = 30*5; //This timer turns off Game Over variable and thus the Game Over text
    global.all_stop = false; //Game is no longer frozen
    centipede_spawn = false; //Centipede are currently not spawning
    alarm[9] = 1; bob = 1
    //Return back to pre-game state

 }//end if score makes high score board

}//end global.game_mode = 5





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Grasshopper Game</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if global.ghgame = 5
{
 draw_healthbar(26,247,240,255,grasshopper_obj.have_mushroom,c_black,c_red,c_red,0,false,false)
}

//DRAW SPIDER SCORE//
 if points_trigger = true then //when a spider dies, the points are triggered to be displayed
 {
  points_trigger = false; //turn off the points trigger for this one-time event
  points_show = true; //variable activating showing the points
  alarm[0] = 60; //set 2-second alarm to turn off the display
 }
 if points_show = true //showing of points activated
 {
  draw_sprite(points_spr,points_amount +//this equation sets the sprite index
  (global.level-1)*3,points_x,points_y);//correctly and draws the points
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.cheating</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.game_mode = 0
instance_create(0,0,cheat_info_obj)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Obsolete
//Draw the text Pause, Freeze the Game until "P" is pressed again
if (global.game_mode = 1) { //only happens during game play mode
   //Make the Screen Shaded During Pause
   if (pause = false) {
          sound_play(pause_snd);
          pause = true
   } else {
          pause = false

   }
   screen_refresh(); //refresh the screen so text will be drawn
   screen_redraw();
   io_clear(); //clears keyboard
   keyboard_wait();
   pause = false
   sound_play(unpause_snd);
}

*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.game_mode = 0 {
     if !instance_exists(cheat_info_obj) {
         game_end();
     }
}

if global.game_mode &gt; 0 {
    sound_stop_all();
    global.mushroom_hunter = 0
    if global.game_mode = 1 then global.game_mode = 0; //Back to Demo Mode
    global.demo = true;
    score = 0
    global.cheating = false
    global.game_over = 1; //Game Over has Occurred, this alerts program to draw Game Over text
    alarm[3] = 30*5; //This timer turns off Game Over variable and thus the Game Over text
    global.all_stop = false; //Game is no longer frozen
    centipede_spawn = false; //Centipede are currently not spawning
    alarm[9] = 1; bob = 1             ;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
